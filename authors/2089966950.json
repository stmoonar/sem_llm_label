{
    "authorId": "2089966950",
    "papers": [
        {
            "paperId": "6ab8aca8f631f42760a86cc614dfd7208b3fe58e",
            "title": "Learning-based Widget Matching for Migrating GUI Test Cases",
            "abstract": "GUI test case migration is to migrate GUI test cases from a source app to a target app. The key of test case migration is widget matching. Recently, researchers have proposed various approaches by formulating widget matching as a matching task. However, since these matching approaches depend on static word embeddings without using contextual information to represent widgets and manually formulated matching functions, there are main limitations of these matching approaches when handling complex matching relations in apps. To address the limitations, we propose the first learning-based widget matching approach named TEMdroid ( TEst Migration) for test case migration. Unlike the existing approaches, TEMdroid uses BERT to capture contextual information and learns a matching model to match widgets. Additionally, to balance the significant imbalance between positive and negative samples in apps, we design a two-stage training strategy where we first train a hard-negative sample miner to mine hard-negative samples, and further train a matching model using positive samples and mined hard-negative samples. Our evaluation on 34 apps shows that TEM-droid is effective in event matching (i.e., widget matching and target event synthesis) and test case migration. For event matching, TEM-droid's Top1 accuracy is 76%, improving over 17% compared to baselines. For test case migration, TEMdroid's F1 score is 89%, also 7% improvement compared to the baseline approach.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2110752255",
                    "name": "Hao Yu"
                },
                {
                    "authorId": "2089966950",
                    "name": "Bo Shen"
                },
                {
                    "authorId": "2038503437",
                    "name": "Dezhi Ran"
                },
                {
                    "authorId": null,
                    "name": "Jiaxin Zhang"
                },
                {
                    "authorId": "2145906426",
                    "name": "Qi Zhang"
                },
                {
                    "authorId": "2304523047",
                    "name": "Yuchi Ma"
                },
                {
                    "authorId": "2084524",
                    "name": "Guangtai Liang"
                },
                {
                    "authorId": "2172444921",
                    "name": "Ying Li"
                },
                {
                    "authorId": "2057038049",
                    "name": "Tao Xie"
                },
                {
                    "authorId": "7417844",
                    "name": "Qianxiang Wang"
                }
            ]
        },
        {
            "paperId": "8105cefbc877c9bc3dd1dff03132ef21fb9c06c3",
            "title": "S$^2$MAT: Simultaneous and Self-Reinforced Mapping and Tracking in Dynamic Urban Scenariosorcing Framework for Simultaneous Mapping and Tracking in Unbounded Urban Environments",
            "abstract": "Despite the increasing prevalence of robots in daily life, their navigation capabilities are still limited to environments with prior knowledge, such as a global map. To fully unlock the potential of robots, it is crucial to enable them to navigate in large-scale unknown and changing unstructured scenarios. This requires the robot to construct an accurate static map in real-time as it explores, while filtering out moving objects to ensure mapping accuracy and, if possible, achieving high-quality pedestrian tracking and collision avoidance. While existing methods can achieve individual goals of spatial mapping or dynamic object detection and tracking, there has been limited research on effectively integrating these two tasks, which are actually coupled and reciprocal. In this work, we propose a solution called S$^2$MAT (Simultaneous and Self-Reinforced Mapping and Tracking) that integrates a front-end dynamic object detection and tracking module with a back-end static mapping module. S$^2$MAT leverages the close and reciprocal interplay between these two modules to efficiently and effectively solve the open problem of simultaneous tracking and mapping in highly dynamic scenarios. We conducted extensive experiments using widely-used datasets and simulations, providing both qualitative and quantitative results to demonstrate S$^2$MAT's state-of-the-art performance in dynamic object detection, tracking, and high-quality static structure mapping. Additionally, we performed long-range robotic navigation in real-world urban scenarios spanning over 7 km, which included challenging obstacles like pedestrians and other traffic agents. The successful navigation provides a comprehensive test of S$^2$MAT's robustness, scalability, efficiency, quality, and its ability to benefit autonomous robots in wild scenarios without pre-built maps.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "26336089",
                    "name": "Tingxiang Fan"
                },
                {
                    "authorId": "2089966950",
                    "name": "Bo Shen"
                },
                {
                    "authorId": "2145039903",
                    "name": "Yinqiang Zhang"
                },
                {
                    "authorId": "2215500204",
                    "name": "Chuye Zhang"
                },
                {
                    "authorId": "103601807",
                    "name": "Lei Yang"
                },
                {
                    "authorId": "2144213446",
                    "name": "Hua Chen"
                },
                {
                    "authorId": "41052788",
                    "name": "Wei Zhang"
                },
                {
                    "authorId": "50617718",
                    "name": "Jianyi Pan"
                }
            ]
        },
        {
            "paperId": "b092ac4a0bcfec38eae7819e40fd8c9e97f4cc7f",
            "title": "Can Programming Languages Boost Each Other via Instruction Tuning?",
            "abstract": "When human programmers have mastered a programming language, it would be easier when they learn a new programming language. In this report, we focus on exploring whether programming languages can boost each other during the instruction fine-tuning phase of code large language models. We conduct extensive experiments of 8 popular programming languages (Python, JavaScript, TypeScript, C, C++, Java, Go, HTML) on StarCoder. Results demonstrate that programming languages can significantly improve each other. For example, CodeM-Python 15B trained on Python is able to increase Java by an absolute 17.95% pass@1 on HumanEval-X. More surprisingly, we found that CodeM-HTML 7B trained on the HTML corpus can improve Java by an absolute 15.24% pass@1. Our training data is released at https://github.com/NL2Code/CodeM.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2134434187",
                    "name": "Daoguang Zan"
                },
                {
                    "authorId": "2151121986",
                    "name": "Ailun Yu"
                },
                {
                    "authorId": "2089966950",
                    "name": "Bo Shen"
                },
                {
                    "authorId": null,
                    "name": "Jiaxin Zhang"
                },
                {
                    "authorId": "2225208156",
                    "name": "Taihong Chen"
                },
                {
                    "authorId": "2225236858",
                    "name": "Bing Geng"
                },
                {
                    "authorId": "143876723",
                    "name": "B. Chen"
                },
                {
                    "authorId": "2225077064",
                    "name": "Jichuan Ji"
                },
                {
                    "authorId": "2236731239",
                    "name": "Yafen Yao"
                },
                {
                    "authorId": "2108097250",
                    "name": "Yongji Wang"
                },
                {
                    "authorId": "7417844",
                    "name": "Qianxiang Wang"
                }
            ]
        },
        {
            "paperId": "e0ca43a635d35fd0414ee76ca1e7c287715f5b00",
            "title": "PanGu-Coder2: Boosting Large Language Models for Code with Ranking Feedback",
            "abstract": "Large Language Models for Code (Code LLM) are flourishing. New and powerful models are released on a weekly basis, demonstrating remarkable performance on the code generation task. Various approaches have been proposed to boost the code generation performance of pre-trained Code LLMs, such as supervised fine-tuning, instruction tuning, reinforcement learning, etc. In this paper, we propose a novel RRTF (Rank Responses to align Test&Teacher Feedback) framework, which can effectively and efficiently boost pre-trained large language models for code generation. Under this framework, we present PanGu-Coder2, which achieves 62.20% pass@1 on the OpenAI HumanEval benchmark. Furthermore, through an extensive evaluation on CoderEval and LeetCode benchmarks, we show that PanGu-Coder2 consistently outperforms all previous Code LLMs.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2089966950",
                    "name": "Bo Shen"
                },
                {
                    "authorId": null,
                    "name": "Jiaxin Zhang"
                },
                {
                    "authorId": "2225208156",
                    "name": "Taihong Chen"
                },
                {
                    "authorId": "2134434187",
                    "name": "Daoguang Zan"
                },
                {
                    "authorId": "2225236858",
                    "name": "Bing Geng"
                },
                {
                    "authorId": "2225236862",
                    "name": "An Fu"
                },
                {
                    "authorId": "1388630853",
                    "name": "Muhan Zeng"
                },
                {
                    "authorId": "2151121986",
                    "name": "Ailun Yu"
                },
                {
                    "authorId": "2225077064",
                    "name": "Jichuan Ji"
                },
                {
                    "authorId": "2225207349",
                    "name": "Jingyang Zhao"
                },
                {
                    "authorId": "2225322476",
                    "name": "Yuenan Guo"
                },
                {
                    "authorId": "2160673563",
                    "name": "Qianxiang Wang"
                }
            ]
        },
        {
            "paperId": "06ea568379211ffa07d9605f66f26f6f736ea5e0",
            "title": "PanGu-Coder: Program Synthesis with Function-Level Language Modeling",
            "abstract": "We present PanGu-Coder, a pretrained decoder-only language model adopting the PanGu-Alpha architecture for text-to-code generation, i.e. the synthesis of programming language solutions given a natural language problem description. We train PanGu-Coder using a two-stage strategy: the first stage employs Causal Language Modelling (CLM) to pre-train on raw programming language data, while the second stage uses a combination of Causal Language Modelling and Masked Language Modelling (MLM) training objectives that focus on the downstream task of text-to-code generation and train on loosely curated pairs of natural language program definitions and code functions. Finally, we discuss PanGu-Coder-FT, which is fine-tuned on a combination of competitive programming problems and code with continuous integration tests. We evaluate PanGu-Coder with a focus on whether it generates functionally correct programs and demonstrate that it achieves equivalent or better performance than similarly sized models, such as CodeX, while attending a smaller context window and training on less data.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "48810605",
                    "name": "Fenia Christopoulou"
                },
                {
                    "authorId": "2346538",
                    "name": "Gerasimos Lampouras"
                },
                {
                    "authorId": "22168669",
                    "name": "Milan Gritta"
                },
                {
                    "authorId": "2044459",
                    "name": "Guchun Zhang"
                },
                {
                    "authorId": "121083081",
                    "name": "Yinpeng Guo"
                },
                {
                    "authorId": "2145415560",
                    "name": "Zhong-yi Li"
                },
                {
                    "authorId": "2145908386",
                    "name": "Qi Zhang"
                },
                {
                    "authorId": "6250798",
                    "name": "M. Xiao"
                },
                {
                    "authorId": "2089966950",
                    "name": "Bo Shen"
                },
                {
                    "authorId": "2155689998",
                    "name": "Lin Li"
                },
                {
                    "authorId": "145772431",
                    "name": "Hao Yu"
                },
                {
                    "authorId": "14906343",
                    "name": "Li-yu Yan"
                },
                {
                    "authorId": "8157288",
                    "name": "Pingyi Zhou"
                },
                {
                    "authorId": "2153689079",
                    "name": "Xin Wang"
                },
                {
                    "authorId": "2304523047",
                    "name": "Yuchi Ma"
                },
                {
                    "authorId": "2676143",
                    "name": "Ignacio Iacobacci"
                },
                {
                    "authorId": "2136912252",
                    "name": "Yasheng Wang"
                },
                {
                    "authorId": "2084524",
                    "name": "Guangtai Liang"
                },
                {
                    "authorId": "2111613690",
                    "name": "Jia Wei"
                },
                {
                    "authorId": "2110310493",
                    "name": "Xin Jiang"
                },
                {
                    "authorId": "7417844",
                    "name": "Qianxiang Wang"
                },
                {
                    "authorId": "30738758",
                    "name": "Qun Liu"
                }
            ]
        },
        {
            "paperId": "771d5b79f2635cced854f0274ab2810d4ce2beb5",
            "title": "DynamicFilter: an Online Dynamic Objects Removal Framework for Highly Dynamic Environments",
            "abstract": "Emergence of massive dynamic objects will diversify spatial structures when robots navigate in urban environments. Therefore, the online removal of dynamic objects is critical. In this paper, we introduce a novel online removal framework for highly dynamic urban environments. The framework consists of the scan-to-map front-end and the map-to-map back-end modules. Both the front- and back-ends deeply integrate the visibility-based approach and map-based approach. The experiments validate the framework in highly dynamic simulation scenarios and real-world dataset.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "26336089",
                    "name": "Tingxiang Fan"
                },
                {
                    "authorId": "2089966950",
                    "name": "Bo Shen"
                },
                {
                    "authorId": "2144213446",
                    "name": "Hua Chen"
                },
                {
                    "authorId": "41052788",
                    "name": "Wei Zhang"
                },
                {
                    "authorId": "50617718",
                    "name": "Jianyi Pan"
                }
            ]
        },
        {
            "paperId": "254f25fbe4c48f161785a8a13f5d56434a608e1b",
            "title": "Cross-language Code Coupling Detection: A Preliminary Study on Android Applications",
            "abstract": "Framework-based multi-lingual software is increasingly prevalent, but it also brings negative effects and extra burden on software maintenance and evolution, because of the introduced cross-language code coupling, which are usually mixed with framework-specific conventions. Researchers have proposed various approaches to code coupling detection, but there is still a lack of necessary support for cross-language coupling detection in framework-based software development. In this paper, we present a preliminary study about cross-language coupling detection in software development based on the Android application framework. We investigate the characteristics of multi-lingual changes in the top-100 starred open-source Android repositories on GitHub, and find that multi-lingual commits are non-trivial: their code changes are more scattered, and more inclined to introduce bugs than other commits. To mitigate the side-effect of multi-lingual development, we propose Grace, a Graph-based cross-language co-change suggestion approach for Android application development. Grace (a) designs a language-agnostic graph to represent code elements from different languages, and (b) employs an entity-based collaborative filtering algorithm to detect and rank candidates of cross-language code couplings, from the graph representation of the latest version as well as the historical multi-lingual commits of a repository. To evaluate the effectiveness of Grace, we apply it to the two tasks of cross-language co-change suggestion and inconsistency checking. Results show that Grace (a) can effectively suggest cross-language co-changed files and types, and (b) can also find existing and potential bugs or code smells caused by inconsistent co-changes.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2089966950",
                    "name": "Bo Shen"
                },
                {
                    "authorId": "144713310",
                    "name": "Wei Zhang"
                },
                {
                    "authorId": "2151121986",
                    "name": "Ailun Yu"
                },
                {
                    "authorId": "2149150244",
                    "name": "Zhao Wei"
                },
                {
                    "authorId": "2084524",
                    "name": "Guangtai Liang"
                },
                {
                    "authorId": "47941283",
                    "name": "Haiyan Zhao"
                },
                {
                    "authorId": "1700880",
                    "name": "Zhi Jin"
                }
            ]
        },
        {
            "paperId": "a854f755a47260b5ea7bf8f126c1aa4082fa0672",
            "title": "SmartCommit: a graph-based interactive assistant for activity-oriented commits",
            "abstract": "In collaborative software development, it is considered to be a best practice to submit code changes as a sequence of cohesive commits, each of which records the work result of a specific development activity, such as adding a new feature, bug fixing, and refactoring. However, rather than following this best practice, developers often submit a set of loosely-related changes serving for different development activities as a composite commit, due to the tedious manual work and lack of effective tool support to decompose such a tangled changeset. Composite commits often obfuscate the change history of software artifacts and bring challenges to efficient collaboration among developers. To encourage activity-oriented commits, we propose SmartCommit, a graph-partitioning-based interactive approach to tangled changeset decomposition that leverages not only the efficiency of algorithms but also the knowledge of developers. To evaluate the effectiveness of our approach, we (1) deployed SmartCommit in an international IT company, and analyzed usage data collected from a field study with 83 engineers over 9 months; and (2) conducted a controlled experiment on 3,000 synthetic composite commits from 10 diverse open-source projects. Results show that SmartCommit achieves a median accuracy between 71\u201384% when decomposing composite commits without developer involvement, and significantly helps developers follow the best practice of submitting activity-oriented commits with acceptable interaction effort and time cost in real collaborative software development.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2089966950",
                    "name": "Bo Shen"
                },
                {
                    "authorId": "144713310",
                    "name": "Wei Zhang"
                },
                {
                    "authorId": "145832795",
                    "name": "Christian K\u00e4stner"
                },
                {
                    "authorId": "47941283",
                    "name": "Haiyan Zhao"
                },
                {
                    "authorId": "2149150244",
                    "name": "Zhao Wei"
                },
                {
                    "authorId": "2084524",
                    "name": "Guangtai Liang"
                },
                {
                    "authorId": "1700880",
                    "name": "Zhi Jin"
                }
            ]
        },
        {
            "paperId": "d2616be195f839fef1b34fec02ddfef147b3db21",
            "title": "SoManyConflicts: Resolve Many Merge Conflicts Interactively and Systematically",
            "abstract": "Code merging plays an important role in collaborative software development. However, it is often tedious and error-prone for developers to manually resolve merge conflicts, especially when there are many conflicts after merging long-lived branches or parallel versions. In this paper, we present SoManyConflicts, a language-agnostic approach to help developers resolve merge conflicts systematically, by utilizing their interrelations (e.g., dependency, similarity, etc.). SoManyConflicts employs a graph representation to model these interrelations and provides 3 major features: 1) cluster and order related conflict based on the graph connectivity; 2) suggest related conflicts of one focused conflict based on the topological sorting, 3) suggest resolution strategies for unresolved conflicts based already resolved ones. We have implemented SoManyConflicts as a Visual Studio Code extension that supports multiple languages (Java, JavaScript, and TypeScript, etc.), which is briefly introduced in the video: https://youtu.be/asWhj1KTU. The source code is publicly available at: https://github.com/Symbolk/somanyconflicts.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2089966950",
                    "name": "Bo Shen"
                },
                {
                    "authorId": "144713310",
                    "name": "Wei Zhang"
                },
                {
                    "authorId": "2151121986",
                    "name": "Ailun Yu"
                },
                {
                    "authorId": "2187665541",
                    "name": "Yifan Shi"
                },
                {
                    "authorId": "47941283",
                    "name": "Haiyan Zhao"
                },
                {
                    "authorId": "2152843656",
                    "name": "Zhi Jin"
                }
            ]
        },
        {
            "paperId": "558bd79e68893b0e8d31a3e91c294537d5beb501",
            "title": "IntelliMerge: a refactoring-aware software merging technique",
            "abstract": "In modern software development, developers rely on version control systems like Git to collaborate in the branch-based development workflow. One downside of this workflow is the conflicts occurred when merging contributions from different developers: these conflicts are tedious and error-prone to be correctly resolved, reducing the efficiency of collaboration and introducing potential bugs. The situation becomes even worse, with the popularity of refactorings in software development and evolution, because current merging tools (usually based on the text or tree structures of source code) are unaware of refactorings. In this paper, we present IntelliMerge, a graph-based refactoring-aware merging algorithm for Java programs. We explicitly enhance this algorithm's ability in detecting and resolving refactoring-related conflicts. Through the evaluation on 1,070 merge scenarios from 10 popular open-source Java projects, we show that IntelliMerge reduces the number of merge conflicts by 58.90% comparing with GitMerge (the prevalent unstructured merging tool) and 11.84% comparing with jFSTMerge (the state-of-the-art semi-structured merging tool) without sacrificing the auto-merging precision (88.48%) and recall (90.22%). Besides, the evaluation of performance shows that IntelliMerge takes 539 milliseconds to process one merge scenario on the median, which indicates its feasibility in real-world applications.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2089966950",
                    "name": "Bo Shen"
                },
                {
                    "authorId": "144713310",
                    "name": "Wei Zhang"
                },
                {
                    "authorId": "47941283",
                    "name": "Haiyan Zhao"
                },
                {
                    "authorId": "2084524",
                    "name": "Guangtai Liang"
                },
                {
                    "authorId": "1700880",
                    "name": "Zhi Jin"
                },
                {
                    "authorId": "7417844",
                    "name": "Qianxiang Wang"
                }
            ]
        }
    ]
}