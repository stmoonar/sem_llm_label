{
    "authorId": "2065660489",
    "papers": [
        {
            "paperId": "0e2d94dc044191825c0137817a928cae7ea95a7f",
            "title": "Ou: Automating the Parallelization of Zero-Knowledge Protocols",
            "abstract": "A zero-knowledge proof (ZKP) is a powerful cryptographic primitive used in many decentralized or privacy-focused applications. However, the high overhead of ZKPs can restrict their practical applicability. We design a programming language, Ou, aimed at easing the programmer's burden when writing efficient ZKPs, and a compiler framework, Lian, that automates the analysis and distribution of statements to a computing cluster. Ou uses programming language semantics, formal methods, and combinatorial optimization to automatically partition an Ou program into efficiently sized chunks for parallel ZK-proving and/or verification. We contribute: (1) A front-end language where users can write proof statements as imperative programs in a familiar syntax; (2) A compiler architecture and implementation that automatically analyzes the program and compiles it into an optimized IR that can be lifted to a variety of ZKP constructions; and (3) A cutting algorithm, based on Pseudo-Boolean optimization and Integer Linear Programming, that reorders instructions and then partitions the program into efficiently sized chunks for parallel evaluation and efficient state reconciliation.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "1380151268",
                    "name": "Yuyang Sang"
                },
                {
                    "authorId": "2065660489",
                    "name": "Ning Luo"
                },
                {
                    "authorId": "2007693530",
                    "name": "Samuel Judson"
                },
                {
                    "authorId": "2219634695",
                    "name": "Ben Chaimberg"
                },
                {
                    "authorId": "1682679",
                    "name": "Timos Antonopoulos"
                },
                {
                    "authorId": "144129720",
                    "name": "Xiao Wang"
                },
                {
                    "authorId": "2869954",
                    "name": "R. Piskac"
                },
                {
                    "authorId": "144656147",
                    "name": "Zhong Shao"
                }
            ]
        },
        {
            "paperId": "3a60f65ce078fae43519855458e2a0d319ef1d74",
            "title": "ZKSMT: A VM for Proving SMT Theorems in Zero Knowledge",
            "abstract": "Verification of program safety is often reducible to proving the unsatisfiability (i.e., validity) of a formula in Satisfiability Modulo Theories (SMT): Boolean logic combined with theories that formalize arbitrary first-order fragments. Zero-knowledge (ZK) proofs allow SMT formulas to be validated without revealing the underlying formulas or their proofs to other parties, which is a crucial building block for proving the safety of proprietary programs. Recently, Luo et al. (CCS 2022) studied the simpler problem of proving the unsatisfia-bility of pure Boolean formulas but does not support proofs generated by SMT solvers. This work presents ZKSMT , a novel framework for proving the validity of SMT formulas in ZK. We design a virtual machine (VM) tailored to efficiently represent the verification process of SMT validity proofs in ZK. Our VM can support the vast majority of popular theories when proving program safety while being complete and sound. To demonstrate this, we instantiate the commonly used theories of equality and linear integer arithmetic in our VM with theory-specific optimizations for proving them in ZK. ZKSMT achieves high practicality even when running on realistic SMT formulas generated by Boogie, a common tool for software verification. It achieves a three-order-of-magnitude improvement compared to",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2268079351",
                    "name": "Daniel Luick"
                },
                {
                    "authorId": "2168012965",
                    "name": "John C. Kolesar"
                },
                {
                    "authorId": "1682679",
                    "name": "Timos Antonopoulos"
                },
                {
                    "authorId": "2271486021",
                    "name": "William R. Harris"
                },
                {
                    "authorId": "2268083269",
                    "name": "James Parker"
                },
                {
                    "authorId": "2869954",
                    "name": "R. Piskac"
                },
                {
                    "authorId": "2337345",
                    "name": "Eran Tromer"
                },
                {
                    "authorId": "2268173877",
                    "name": "Xiao Wang"
                },
                {
                    "authorId": "2065660489",
                    "name": "Ning Luo"
                }
            ]
        },
        {
            "paperId": "cebfe257057bd6466892ca23cca9fc9085106e06",
            "title": "Privacy-Preserving Regular Expression Matching using Nondeterministic Finite Automata",
            "abstract": ",",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2065660489",
                    "name": "Ning Luo"
                },
                {
                    "authorId": "2148353350",
                    "name": "Chenkai Weng"
                },
                {
                    "authorId": "2109471560",
                    "name": "Jaspal Singh"
                },
                {
                    "authorId": "2219567787",
                    "name": "Gefei Tan"
                },
                {
                    "authorId": "2869954",
                    "name": "R. Piskac"
                },
                {
                    "authorId": "1702744",
                    "name": "Mariana Raykova"
                }
            ]
        },
        {
            "paperId": "14dceacda0278b823d11340d77ce4f0d611e1c05",
            "title": "IVeri: Privacy-Preserving Interdomain Verification",
            "abstract": "In an interdomain network, autonomous systems (ASes) often establish peering agreements, so that one AS (agreement consumer) can influence the routing policies of the other AS (agreement provider). Peering agreements are implemented in the BGP configuration of the agreement provider. It is crucial to verify their implementation because one error can lead to disastrous consequences. However, the fundamental challenge for peering agreement verification is how to preserve the privacy of both ASes involved in the agreement. To this end, this paper presents IVeri, the first privacy-preserving interdomain agreement verification system. IVeri models the interdomain agreement verification problem as a SAT formula, and develops a novel, efficient, privacy-serving SAT solver, which uses oblivious shuffling and garbled circuits as the key building blocks to let the agreement consumer and provider collaboratively verify the implementation of interdomain peering agreements without exposing their private information. A prototype of IVeri is implemented and evaluated extensively. Results show that IVeri achieves accurate, privacy-preserving interdomain agreement verification with reasonable overhead.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2065660489",
                    "name": "Ning Luo"
                },
                {
                    "authorId": "2955716",
                    "name": "Qiao Xiang"
                },
                {
                    "authorId": "1682679",
                    "name": "Timos Antonopoulos"
                },
                {
                    "authorId": "2869954",
                    "name": "R. Piskac"
                },
                {
                    "authorId": "145756439",
                    "name": "Y. Yang"
                },
                {
                    "authorId": "1678308",
                    "name": "Franck Le"
                }
            ]
        },
        {
            "paperId": "2565ea47daef463a1a8db42818930ddcb65cdbc7",
            "title": "Proving UNSAT in Zero Knowledge",
            "abstract": "Zero-knowledge (ZK) protocols enable one party to prove to others that it knows a fact without revealing any information about the evidence for such knowledge. There exist ZK protocols for all problems in NP, and recent works developed highly efficient protocols for proving knowledge of satisfying assignments to Boolean formulas, circuits and other NP formalisms. This work shows an efficient protocol for the converse: proving formula unsatisfiability in ZK (when the prover posses a non-ZK proof). An immediate practical application is efficiently proving safety of secret programs. The key insight is to prove, in ZK, the validity of resolution proofs of unsatisfiability. This is efficiently realized using an algebraic representation that exploits resolution proofs' structure to represent formula clauses as low-degree polynomials, combined with ZK random-access arguments. Only the proof's dimensions are revealed. We implemented our protocol and used it to prove unsatisfiability of formulas that encode combinatoric problems and program correctness conditions in standard verification benchmarks, including Linux kernel drivers and Intel cryptography modules. The results demonstrate both that our protocol has practical utility, and that its aggressive optimizations, based on non-trivial encodings, significantly improve practical performance.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2065660489",
                    "name": "Ning Luo"
                },
                {
                    "authorId": "1682679",
                    "name": "Timos Antonopoulos"
                },
                {
                    "authorId": "144740804",
                    "name": "William R. Harris"
                },
                {
                    "authorId": "2869954",
                    "name": "R. Piskac"
                },
                {
                    "authorId": "2337345",
                    "name": "Eran Tromer"
                },
                {
                    "authorId": "144129720",
                    "name": "Xiao Wang"
                }
            ]
        },
        {
            "paperId": "52d827e729d394069802a5645bb9c59bbf1fa736",
            "title": "Enhanced Grey Box Fuzzing For Intel Media Driver",
            "abstract": "Grey box fuzzing is one of the most successful methods for automatic vulnerability detection. However, conventional Grey box Fuzzers like AFL can open perform fuzzing against the whole input and spend more time on smaller seeds with lower execution time, which significantly impact fuzzing efficiency for complicated input types. In this work, we introduce one intelligent grey box fuzzing for Intel Media driver, MediaFuzzer, which can perform effective fuzzing based on selective fields of complicated input. Also, with one novel calling depth-based power schedule biased toward seed corpus which can lead to deeper calling chain, it dramatically improves the vulnerability exposures (~6.6 times more issues exposed) and fuzzing efficiency (~2.7 times more efficient) against the baseline AFL for Intel media driver with almost negligible overhead.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2107956714",
                    "name": "Linlin Zhang"
                },
                {
                    "authorId": "2065660489",
                    "name": "Ning Luo"
                }
            ]
        },
        {
            "paperId": "01be4f15ba15509be38c88ffbf7c2dcd5ca9d07a",
            "title": "Looking for the Maximum Independent Set: A New Perspective on the Stable Path Problem",
            "abstract": "The stable path problem (SPP) is a unified model for analyzing the convergence of distributed routing protocols (e.g., BGP), and a foundation for many network verification tools. Although substantial progress has been made on finding solutions (i.e., stable path assignments) for particular subclasses of SPP instances and analyzing the relation between properties of SPP instances and the convergence of corresponding routing policies, the non-trivial challenge of finding stable path assignments to generic SPP instances still remains. Tackling this challenge is important because it can enable multiple important, novel routing use cases. To fill this gap, in this paper we introduce a novel data structure called solvability digraph, which encodes key properties about stable path assignments in a compact graph representation. Thus SPP is equivalently transformed to the problem of finding in the solvability digraph a maximum independent set (MIS) of size equal to the number of autonomous systems (ASes) in the given SPP instance. We leverage this key finding to develop a heuristic polynomial algorithm GREEDYMIS that solves strictly more SPP instances than state-of-the-art heuristics. We apply GREEDYMIS to designing two important, novel use cases: (1) a centralized interdomain routing system that uses GREEDYMIS to compute paths for ASes and (2) a secure multi-party computation (SMPC) protocol that allows ASes to use GREEDYMIS collaboratively to compute paths without exposing their routing preferences. We demonstrate the benefits and efficiency of these use cases via evaluation using real-world datasets.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2981658",
                    "name": "Yichao Cheng"
                },
                {
                    "authorId": "2065660489",
                    "name": "Ning Luo"
                },
                {
                    "authorId": "2108085185",
                    "name": "J. Zhang"
                },
                {
                    "authorId": "1682679",
                    "name": "Timos Antonopoulos"
                },
                {
                    "authorId": "2869954",
                    "name": "R. Piskac"
                },
                {
                    "authorId": "2955716",
                    "name": "Qiao Xiang"
                }
            ]
        },
        {
            "paperId": "9f81edbb108f9d14020700949abd12722769b52e",
            "title": "ppSAT: Towards Two-Party Private SAT Solving",
            "abstract": "We design and implement a privacy-preserving Boolean satis\ufb01ability (ppSAT) solver, which allows mutually distrustful parties to evaluate the conjunction of their input formulas while maintaining privacy. We \ufb01rst de\ufb01ne a family of security guarantees reconcilable with the (known) exponential complexity of SAT solving, and then construct an oblivious variant of the classic DPLL algorithm which can be integrated with existing secure two-party computation (2PC) techniques. We further observe that most known SAT solving heuristics are unsuitable for 2PC, as they are highly data-dependent in order to minimize the number of exploration steps. Faced with how best to trade off between the number of steps and the cost of obliviously executing each one, we design three ef\ufb01cient oblivious heuristics, one deterministic and two randomized. As a result of this effort we are able to evaluate our ppSAT solver on small but practical instances arising from the haplotype inference problem in bioinformatics. We conclude by looking towards future directions for making ppSAT solving more practical, most especially the integration of con\ufb02ict-driven clause learning (CDCL).",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2065660489",
                    "name": "Ning Luo"
                },
                {
                    "authorId": "2007693530",
                    "name": "Samuel Judson"
                },
                {
                    "authorId": "1682679",
                    "name": "Timos Antonopoulos"
                },
                {
                    "authorId": "2869954",
                    "name": "R. Piskac"
                },
                {
                    "authorId": "2118448132",
                    "name": "X. Wang"
                }
            ]
        },
        {
            "paperId": "a4b747161db3a2a6ea499f91b36070ab221a9326",
            "title": "Privacy Preserving CTL Model Checking through Oblivious Graph Algorithms",
            "abstract": "Model checking is the problem of verifying whether an abstract model $\\mathcalM of a computational system meets a specification of behavior \u03c6. We apply the cryptographic theory of secure multiparty computation (MPC) to model checking. With our construction, adversarial parties D and A holding $\\mathcalM and \u03c6 respectively may check satisfaction --- notationally, whether $\\mathcalM |= \u03c6 --- while maintaining privacy of all other meaningful information. Our protocol adopts oblivious graph algorithms to provide for secure computation of global explicit state model checking with specifications in Computation Tree Logic (CTL), and its design ameliorates the asymptotic overhead required by generic MPC schemes. We therefore introduce the problem of privacy preserving model checking (PPMC) and provide an initial step towards applicable and efficient constructions.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2007693530",
                    "name": "Samuel Judson"
                },
                {
                    "authorId": "2065660489",
                    "name": "Ning Luo"
                },
                {
                    "authorId": "1682679",
                    "name": "Timos Antonopoulos"
                },
                {
                    "authorId": "2869954",
                    "name": "R. Piskac"
                }
            ]
        }
    ]
}