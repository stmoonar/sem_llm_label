{
    "authorId": "1747542",
    "papers": [
        {
            "paperId": "1a6c3dfb4551e4af82a4138684df562bfca21f54",
            "title": "Generative AI-Based Effective Malware Detection for Embedded Computing Systems",
            "abstract": "One of the pivotal security threats for the embedded computing systems is malicious software a.k.a malware. With efficiency and efficacy, Machine Learning (ML) has been widely adopted for malware detection in recent times. Despite being efficient, the existing techniques require a tremendous number of benign and malware samples for training and modeling an efficient malware detector. Furthermore, such constraints limit the detection of emerging malware samples due to the lack of sufficient malware samples required for efficient training. To address such concerns, we introduce a code-aware data generation technique that generates multiple mutated samples of the limitedly seen malware by the devices. Loss minimization ensures that the generated samples closely mimic the limitedly seen malware and mitigate the impractical samples. Such developed malware is further incorporated into the training set to formulate the model that can efficiently detect the emerging malware despite having limited exposure. The experimental results demonstrates that the proposed technique achieves an accuracy of 90% in detecting limitedly seen malware, which is approximately 3x more than the accuracy attained by state-of-the-art techniques.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2114853982",
                    "name": "Sreenitha Kasarapu"
                },
                {
                    "authorId": "1474544063",
                    "name": "Sanket Shukla"
                },
                {
                    "authorId": "1474539078",
                    "name": "Rakibul Hassan"
                },
                {
                    "authorId": "1928425942",
                    "name": "Avesta Sasan"
                },
                {
                    "authorId": "1747542",
                    "name": "H. Homayoun"
                },
                {
                    "authorId": "2389278",
                    "name": "Sai Manoj Pudukotai Dinakarrao"
                }
            ]
        },
        {
            "paperId": "263d90a9a2aca3ebc5ec7b8af91cee2a843fff33",
            "title": "Automated Hardware Logic Obfuscation Framework Using GPT",
            "abstract": "Obfuscation stands as a promising solution for safe-guarding hardware intellectual property (IP) against a spectrum of threats including reverse engineering, IP piracy, and tampering. In this paper, we introduce Obfus-chat, a novel framework leveraging Generative Pre-trained Transformer (GPT) models to automate the obfuscation process. The proposed framework accepts hardware design netlists and key sizes as inputs, and autonomously generates obfuscated code tailored to enhance security. To evaluate the effectiveness of our approach, we employ the Trust-Hub Obfuscation Benchmark for comparative analysis. We employed SAT attacks to assess the security of the design, along with functional verification procedures to ensure that the obfuscated design remains consistent with the original. Our results demonstrate the efficacy and efficiency of the proposed framework in fortifying hardware IP against potential threats, thus providing a valuable contribution to the field of hardware security.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2161966302",
                    "name": "B. S. Latibari"
                },
                {
                    "authorId": "2302322223",
                    "name": "Sujan Ghimire"
                },
                {
                    "authorId": "2000958833",
                    "name": "Muhtasim Alam Chowdhury"
                },
                {
                    "authorId": "12539086",
                    "name": "Najmeh Nazari"
                },
                {
                    "authorId": "2167580607",
                    "name": "Kevin Immanuel Gubbi"
                },
                {
                    "authorId": "1747542",
                    "name": "H. Homayoun"
                },
                {
                    "authorId": "1928425942",
                    "name": "Avesta Sasan"
                },
                {
                    "authorId": "2276023224",
                    "name": "Soheil Salehi"
                }
            ]
        },
        {
            "paperId": "2b7c43c12f3a6024f2e8d6dfea597ef7f830d61e",
            "title": "Securing On-Chip Learning: Navigating Vulnerabilities and Potential Safeguards in Spiking Neural Network Architectures",
            "abstract": "On-chip learning is the process of training or updating machine learning models directly on specialized hardware. This approach differs from traditional machine learning, which typically conducts training on external computing resources like Central Processing Units (CPUs) or Graphics Processing Units (GPUs). On-chip learning offers several advantages, including reduced latency, improved energy efficiency, enhanced privacy, and adaptability. Consequently, it holds great promise for enabling intelligent decision-making and adaptability in resource-constrained edge and IoT devices while addressing privacy concerns. In Spiking Neural Network (SNN), on-chip learning is enabled by adjusting synaptic weights, allowing the network\u2019s behavior to dynamically align with desired outcomes. However, this adaptability may introduce potential security vulnerabilities. Unmitigated security risks in on-chip learning can lead to various threats, including data leaks, unauthorized access, and even adversarial manipulation of the learning process. This manuscript aims to provide a comprehensive overview of the security risks associated with on-chip learning, with a focus on potential vulnerabilities within the SNN architecture. We will explore real-world scenarios where these vulnerabilities can be exploited and outline protective measures and mitigation strategies to address these security concerns.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "12539086",
                    "name": "Najmeh Nazari"
                },
                {
                    "authorId": "2167580607",
                    "name": "Kevin Immanuel Gubbi"
                },
                {
                    "authorId": "2161966302",
                    "name": "B. S. Latibari"
                },
                {
                    "authorId": "2000958833",
                    "name": "Muhtasim Alam Chowdhury"
                },
                {
                    "authorId": "65927400",
                    "name": "Chongzhou Fang"
                },
                {
                    "authorId": "1928425942",
                    "name": "Avesta Sasan"
                },
                {
                    "authorId": "2951001",
                    "name": "S. Rafatirad"
                },
                {
                    "authorId": "1747542",
                    "name": "H. Homayoun"
                },
                {
                    "authorId": "2276023224",
                    "name": "Soheil Salehi"
                }
            ]
        },
        {
            "paperId": "3090d4a8845667a8e0b591b7322c57bcf174b72f",
            "title": "Intelligent Malware Detection based on Hardware Performance Counters: A Comprehensive Survey",
            "abstract": "The growing complexity of contemporary computing systems heightens susceptibility to emerging cyber threats. Recent advancements in computer architecture security leverage Hardware Performance Counters (HPCs) registers to monitor applications behavior and access low-level features. The integration of Machine Learning (ML) techniques emerges as a promising solution, overcoming the performance limitations of conventional software-based defenses. Specialized HPC registers record varied hardware-related events, showcasing effectiveness in detecting malicious activities through the application of ML algorithms. This survey presents a comprehensive and comparative analysis of recent advancements in the emerging field of intelligent hardware-assisted malware detection, a topic that has garnered significant attention within the research community for the past decade. Additionally, it outlines current challenges and forecasts future research trends, offering insights for effective ML-based security countermeasures based on hardware performance counters.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "34223410",
                    "name": "H. Sayadi"
                },
                {
                    "authorId": "49938206",
                    "name": "Z. He"
                },
                {
                    "authorId": "30521811",
                    "name": "Hosein Mohammadi Makrani"
                },
                {
                    "authorId": "1747542",
                    "name": "H. Homayoun"
                }
            ]
        },
        {
            "paperId": "4e62ea81ae2c2f1c9179ad94403a359c06172fa1",
            "title": "LLM-FIN: Large Language Models Fingerprinting Attack on Edge Devices",
            "abstract": "The deployment of Large Language Models (LLMs) into edge and embedded devices marks a transformative step in integrating Artificial Intelligence (AI) into real-world applications. This integration is crucial as it enables efficient, localized processing, reducing reliance on cloud computing and enhancing data privacy by keeping sensitive information on the device. In the domain of machine learning (ML) security, concealing the architecture of LLMs is imperative. Shielding the architecture protects intellectual property and thwarts malicious attempts to exploit model-specific weaknesses. Our research proposes an efficient fingerprinting method tailored to identify the architectural family of LLMs specifically within edge and embedded devices. Uniquely, our technique hinges on analyzing memory usage patterns, one of the few accessible data points in a secured edge environment. Employing a supervised machine learning classifier, our methodology demonstrates remarkable efficacy, achieving over 95% accuracy in classifying known LLMs into their architectural families. Notably, it also exhibits robust adaptability, accurately identifying previously unseen models. By focusing on memory usage patterns, our approach paves the way for a new dimension in understanding and securing AI on edge devices, balancing the need for open functionality and essential confidentiality.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "12539086",
                    "name": "Najmeh Nazari"
                },
                {
                    "authorId": "2301597695",
                    "name": "Furi Xiang"
                },
                {
                    "authorId": "65927400",
                    "name": "Chongzhou Fang"
                },
                {
                    "authorId": "30521811",
                    "name": "Hosein Mohammadi Makrani"
                },
                {
                    "authorId": "2301597273",
                    "name": "Aditya Puri"
                },
                {
                    "authorId": "2154848407",
                    "name": "Kartik Patwari"
                },
                {
                    "authorId": "34223410",
                    "name": "H. Sayadi"
                },
                {
                    "authorId": "2951001",
                    "name": "S. Rafatirad"
                },
                {
                    "authorId": "143880500",
                    "name": "Chen-Nee Chuah"
                },
                {
                    "authorId": "1747542",
                    "name": "H. Homayoun"
                }
            ]
        },
        {
            "paperId": "5b03f2f75cff3dd5375e5a981f674829e959a513",
            "title": "Advanced Energy-Efficient System for Precision Electrodermal Activity Monitoring in Stress Detection",
            "abstract": "This paper presents a novel Electrodermal Activity (EDA) signal acquisition system, designed to address the challenges of stress monitoring in contemporary society, where stress affects one in four individuals. Our system focuses on enhancing the accuracy and efficiency of EDA measurements, a reliable indicator of stress. Traditional EDA monitoring solutions often grapple with trade-offs between sensor placement, cost, and power consumption, leading to compromised data accuracy. Our innovative design incorporates an adaptive gain mechanism, catering to the broad dynamic range and high-resolution needs of EDA data analysis. The performance of our system was extensively tested through simulations and a custom Printed Circuit Board (PCB), achieving an error rate below 1\\% and maintaining power consumption at a mere 700$\\mu$A under a 3.7V power supply. This research contributes significantly to the field of wearable health technology, offering a robust and efficient solution for long-term stress monitoring.",
            "fieldsOfStudy": [
                "Engineering",
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2110065155",
                    "name": "Ruoyu Zhang"
                },
                {
                    "authorId": "2162344763",
                    "name": "Ruijie Fang"
                },
                {
                    "authorId": "2185743476",
                    "name": "Elahe Hosseini"
                },
                {
                    "authorId": "65927400",
                    "name": "Chongzhou Fang"
                },
                {
                    "authorId": "2260336596",
                    "name": "Ning Miao"
                },
                {
                    "authorId": "1747542",
                    "name": "H. Homayoun"
                }
            ]
        },
        {
            "paperId": "84e97bfb233d2938d988339e9185429bb5a85d40",
            "title": "SpecScope: Automating Discovery of Exploitable Spectre Gadgets on Black-Box Microarchitectures",
            "abstract": "Transient execution attacks pose information leakage risks in current systems. Disabling speculative execution, though mitigating the issue, results in significant performance loss. Accurate identification of vulnerable gadgets is essential for balancing security and performance. However, uncovering all covert channels is challenging due to complex microarchitectural analysis. This paper introduces SpecScope, a framework for automating the detection of Spectre gadgets in code using a black-box microarchitecture approach. SpecScope focuses on contention between transient and non-transient instructions to precisely identify and reduce false-positive Spectre gadgets, minimizing mitigation overhead. Tested on public libraries, SpecScope outperforms existing methods, reducing False-Positive rates by 8.9% and increasing True-Positive rates by 10.4%.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "12539086",
                    "name": "Najmeh Nazari"
                },
                {
                    "authorId": "2091864570",
                    "name": "Behnam Omidi"
                },
                {
                    "authorId": "65927400",
                    "name": "Chongzhou Fang"
                },
                {
                    "authorId": "30521811",
                    "name": "Hosein Mohammadi Makrani"
                },
                {
                    "authorId": "2951001",
                    "name": "S. Rafatirad"
                },
                {
                    "authorId": "1928425942",
                    "name": "Avesta Sasan"
                },
                {
                    "authorId": "1747542",
                    "name": "H. Homayoun"
                },
                {
                    "authorId": "2874577",
                    "name": "Khaled N. Khasawneh"
                }
            ]
        },
        {
            "paperId": "b160f353c65a25e7234d675ef91febcb26711ad8",
            "title": "Fuzzing BusyBox: Leveraging LLM and Crash Reuse for Embedded Bug Unearthing",
            "abstract": "BusyBox, an open-source software bundling over 300 essential Linux commands into a single executable, is ubiquitous in Linux-based embedded devices. Vulnerabilities in BusyBox can have far-reaching consequences, affecting a wide array of devices. This research, driven by the extensive use of BusyBox, delved into its analysis. The study revealed the prevalence of older BusyBox versions in real-world embedded products, prompting us to conduct fuzz testing on BusyBox. Fuzzing, a pivotal software testing method, aims to induce crashes that are subsequently scrutinized to uncover vulnerabilities. Within this study, we introduce two techniques to fortify software testing. The first technique enhances fuzzing by leveraging Large Language Models (LLM) to generate target-specific initial seeds. Our study showed a substantial increase in crashes when using LLM-generated initial seeds, highlighting the potential of LLM to efficiently tackle the typically labor-intensive task of generating target-specific initial seeds. The second technique involves repurposing previously acquired crash data from similar fuzzed targets before initiating fuzzing on a new target. This approach streamlines the time-consuming fuzz testing process by providing crash data directly to the new target before commencing fuzzing. We successfully identified crashes in the latest BusyBox target without conducting traditional fuzzing, emphasizing the effectiveness of LLM and crash reuse techniques in enhancing software testing and improving vulnerability detection in embedded systems. Additionally, manual triaging was performed to identify the nature of crashes in the latest BusyBox.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2276026599",
                    "name": "Asmita"
                },
                {
                    "authorId": "2290070934",
                    "name": "Yaroslav Oliinyk"
                },
                {
                    "authorId": "2290115054",
                    "name": "Michael Scott"
                },
                {
                    "authorId": "2162752709",
                    "name": "Ryan Tsang"
                },
                {
                    "authorId": "65927400",
                    "name": "Chongzhou Fang"
                },
                {
                    "authorId": "1747542",
                    "name": "H. Homayoun"
                }
            ]
        },
        {
            "paperId": "c5bdf8ab7021d65a8c8706c7a3921c2b52118aac",
            "title": "IRET: Incremental Resolution Enhancing Transformer",
            "abstract": "In our research paper, we introduce a revolutionary approach to designing energy-aware dynamically prunable Vision Transformers for use in edge applications. Our solution denoted as Incremental Resolution Enhancing Transformer (IRET), works by the sequential sampling of the input image. However, in our case, the embedding size of input tokens is considerably smaller than prior-art solutions. This embedding is used in the first few layers of the IRET vision transformer until a reliable attention matrix is formed. Then the attention matrix is used to sample additional information using a learnable 2D lifting scheme only for important tokens and IRET drops the tokens receiving low attention scores. Hence, as the model pays more attention to a subset of tokens for its task, its focus and resolution also increase. This incremental attention-guided sampling of input and dropping of unattended tokens allow IRET to significantly prune its computation tree on demand. By controlling the threshold for dropping unattended tokens and increasing the focus of attended ones, we can train a model that dynamically trades off complexity for accuracy. This is especially useful for edge devices, where accuracy and complexity could be dynamically traded based on factors such as battery life, reliability, etc.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2220651224",
                    "name": "Banafsheh Saber Latibari"
                },
                {
                    "authorId": "2276023224",
                    "name": "Soheil Salehi"
                },
                {
                    "authorId": "1747542",
                    "name": "H. Homayoun"
                },
                {
                    "authorId": "1928425942",
                    "name": "Avesta Sasan"
                }
            ]
        },
        {
            "paperId": "c610489a331d5d736c9c997245369d42ced781ad",
            "title": "FFXE: Dynamic Control Flow Graph Recovery for Embedded Firmware Binaries",
            "abstract": "Control Flow Graphs (CFG) play a significant role as an intermediary analysis in many advanced static and dynamic software analysis techniques. As firmware security and validation for embedded systems becomes a greater concern, accurate CFGs for embedded firmware binaries are crucial for adapting many valuable software analysis techniques to firmware, which can enable more thorough functionality and security analysis. In this work, we present a portable new dynamic CFG recovery technique based on dynamic forced execution that allows us to resolve indirect branches to registered callback functions, which are dependent on asynchronous changes to volatile memory. Our implementation, the Forced Firmware Execution Engine (FFXE), written in Python using the Unicorn emulation framework, is able to identify 100% of known callback functions in our test set of 36 firmware images, something none of the other techniques we tested against were able to do reliably. Using our results and observations, we compare our engine to 4 other CFG recovery techniques and provide both our thoughts on how this work might enhance other tools, and how it might be further developed. With our contributions, we hope to help enable the application of traditionally software-focused security analysis techniques to the hardware interactions that are integral to embedded system firmware.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2162752709",
                    "name": "Ryan Tsang"
                },
                {
                    "authorId": "2276026599",
                    "name": "Asmita"
                },
                {
                    "authorId": "2298064901",
                    "name": "Doreen Joseph"
                },
                {
                    "authorId": "2276023224",
                    "name": "Soheil Salehi"
                },
                {
                    "authorId": "2298060933",
                    "name": "Prasant Mohapatra"
                },
                {
                    "authorId": "1747542",
                    "name": "H. Homayoun"
                }
            ]
        }
    ]
}