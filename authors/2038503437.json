{
    "authorId": "2038503437",
    "papers": [
        {
            "paperId": "352f843fa870125922d1c6978169f4c68c712a0c",
            "title": "SWE-bench-java: A GitHub Issue Resolving Benchmark for Java",
            "abstract": "GitHub issue resolving is a critical task in software engineering, recently gaining significant attention in both industry and academia. Within this task, SWE-bench has been released to evaluate issue resolving capabilities of large language models (LLMs), but has so far only focused on Python version. However, supporting more programming languages is also important, as there is a strong demand in industry. As a first step toward multilingual support, we have developed a Java version of SWE-bench, called SWE-bench-java. We have publicly released the dataset, along with the corresponding Docker-based evaluation environment and leaderboard, which will be continuously maintained and updated in the coming months. To verify the reliability of SWE-bench-java, we implement a classic method SWE-agent and test several powerful LLMs on it. As is well known, developing a high-quality multi-lingual benchmark is time-consuming and labor-intensive, so we welcome contributions through pull requests or collaboration to accelerate its iteration and refinement, paving the way for fully automated programming.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2134434187",
                    "name": "Daoguang Zan"
                },
                {
                    "authorId": "2316953296",
                    "name": "Zhirong Huang"
                },
                {
                    "authorId": "2151121986",
                    "name": "Ailun Yu"
                },
                {
                    "authorId": "2316780443",
                    "name": "Shaoxin Lin"
                },
                {
                    "authorId": "2265936025",
                    "name": "Yifan Shi"
                },
                {
                    "authorId": "2316742211",
                    "name": "Wei Liu"
                },
                {
                    "authorId": "2304895824",
                    "name": "Dong Chen"
                },
                {
                    "authorId": "2316961288",
                    "name": "Zongshuai Qi"
                },
                {
                    "authorId": "2296050795",
                    "name": "Hao Yu"
                },
                {
                    "authorId": "2316959029",
                    "name": "Lei Yu"
                },
                {
                    "authorId": "2038503437",
                    "name": "Dezhi Ran"
                },
                {
                    "authorId": "2304477776",
                    "name": "Muhan Zeng"
                },
                {
                    "authorId": "2293292326",
                    "name": "Bo Shen"
                },
                {
                    "authorId": "2304471393",
                    "name": "Pan Bian"
                },
                {
                    "authorId": "2084524",
                    "name": "Guangtai Liang"
                },
                {
                    "authorId": "36923691",
                    "name": "Bei Guan"
                },
                {
                    "authorId": "2317043738",
                    "name": "Pengjie Huang"
                },
                {
                    "authorId": "2304599644",
                    "name": "Tao Xie"
                },
                {
                    "authorId": "2275749758",
                    "name": "Yongji Wang"
                },
                {
                    "authorId": "2253829508",
                    "name": "Qianxiang Wang"
                }
            ]
        },
        {
            "paperId": "4967e7b40bce74fa76f51001edc46b8e411d7ea2",
            "title": "Path Toward Elderly Friendly Mobile Apps",
            "abstract": "We present our work helping to adapt mobile apps to be friendlier for elderly users. We design actionable guidelines based on empirical investigations, shaping future practices of making a large number of popular mobile apps easier for elderly users.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2038503437",
                    "name": "Dezhi Ran"
                },
                {
                    "authorId": "2304716885",
                    "name": "Yingjie Fu"
                },
                {
                    "authorId": "2304783007",
                    "name": "Yibo He"
                },
                {
                    "authorId": "2255884021",
                    "name": "Tianyu Chen"
                },
                {
                    "authorId": "2304699898",
                    "name": "Xing Tang"
                },
                {
                    "authorId": "2304599644",
                    "name": "Tao Xie"
                }
            ]
        },
        {
            "paperId": "537ecbd5f1f71a11d0080ae588eeb3726e8b807a",
            "title": "Foundation Model Engineering: Engineering Foundation Models Just as Engineering Software",
            "abstract": "By treating data and models as the source code, Foundation Models (FMs) become a new type of software. Mirroring the concept of software crisis, the increasing complexity of FMs making FM crisis a tangible concern in the coming decade, appealing for new theories and methodologies from the field of software engineering. In this paper, we outline our vision of introducing Foundation Model (FM) engineering, a strategic response to the anticipated FM crisis with principled engineering methodologies. FM engineering aims to mitigate potential issues in FM development and application through the introduction of declarative, automated, and unified programming interfaces for both data and model management, reducing the complexities involved in working with FMs by providing a more structured and intuitive process for developers. Through the establishment of FM engineering, we aim to provide a robust, automated, and extensible framework that addresses the imminent challenges, and discovering new research opportunities for the software engineering field.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2038503437",
                    "name": "Dezhi Ran"
                },
                {
                    "authorId": "2310818064",
                    "name": "Mengzhou Wu"
                },
                {
                    "authorId": "2306149225",
                    "name": "Wei Yang"
                },
                {
                    "authorId": "2304599644",
                    "name": "Tao Xie"
                }
            ]
        },
        {
            "paperId": "e21a26e0b9458d16ff6ef9571205958d7e36bdcd",
            "title": "Skill-Adpative Imitation Learning for UI Test Reuse",
            "abstract": "To alleviate the substantial cost of manually crafting user interface (UI) test cases, UI test migration aims to automatically generate test cases for a target mobile application (app) by adapting those from a source app that shares similar functionalities. Traditionally, this process has been approached as a sequential UI-event-mapping problem, where events in the source app are mapped to those in the target one based on their textual descriptions. Prior research has extensively focused on enhancing the event-mapping accuracy of NLP models. Although the advent of large language models (LLMs) with impressive NLP capabilities suggests the potential for near-perfect event-mapping, our study demonstrates that even the highly accurate event-mapping of LLMs is insufficient to address the implementation discrepancies between the source and the target apps, reducing the overall effectiveness of LLM-driven solutions for UI test migration. To address this challenge, in this paper, we propose SAIL, a skill-adaptive imitation learning framework designed to enhance the effectiveness of UI test migration through two key designs. First, SAIL leverages the source test cases as demonstrations and employs a multi-level abstraction of test cases' underlying skills, so as to extract the testing information from source test cases as the knowledge base for the subsequent test generation on the target app. Second, SAIL selectively reuses a subset of the learned skills to guide the generation of test cases for the target app with its novel context- and history-aware skill adaptation. While SAIL can be instantiated with any imitation learning techniques, we utilize the in-context learning capabilities of LLMs to instantiate SAIL. Evaluations results show that SAIL substantially improves the effectiveness of UI test migration, with 149\\% higher success rate than state-of-the-art approaches.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2310818064",
                    "name": "Mengzhou Wu"
                },
                {
                    "authorId": "2322371553",
                    "name": "Hao Wang"
                },
                {
                    "authorId": "2322249714",
                    "name": "Jun Ren"
                },
                {
                    "authorId": "2321453509",
                    "name": "Yuan Cao"
                },
                {
                    "authorId": "2322207592",
                    "name": "Yuetong Li"
                },
                {
                    "authorId": "2322098519",
                    "name": "Alex Jiang"
                },
                {
                    "authorId": "2038503437",
                    "name": "Dezhi Ran"
                },
                {
                    "authorId": "2322604156",
                    "name": "Yitao Hu"
                },
                {
                    "authorId": "2306149225",
                    "name": "Wei Yang"
                },
                {
                    "authorId": "2304599644",
                    "name": "Tao Xie"
                }
            ]
        },
        {
            "paperId": "6ab8aca8f631f42760a86cc614dfd7208b3fe58e",
            "title": "Learning-based Widget Matching for Migrating GUI Test Cases",
            "abstract": "GUI test case migration is to migrate GUI test cases from a source app to a target app. The key of test case migration is widget matching. Recently, researchers have proposed various approaches by formulating widget matching as a matching task. However, since these matching approaches depend on static word embeddings without using contextual information to represent widgets and manually formulated matching functions, there are main limitations of these matching approaches when handling complex matching relations in apps. To address the limitations, we propose the first learning-based widget matching approach named TEMdroid ( TEst Migration) for test case migration. Unlike the existing approaches, TEMdroid uses BERT to capture contextual information and learns a matching model to match widgets. Additionally, to balance the significant imbalance between positive and negative samples in apps, we design a two-stage training strategy where we first train a hard-negative sample miner to mine hard-negative samples, and further train a matching model using positive samples and mined hard-negative samples. Our evaluation on 34 apps shows that TEM-droid is effective in event matching (i.e., widget matching and target event synthesis) and test case migration. For event matching, TEM-droid's Top1 accuracy is 76%, improving over 17% compared to baselines. For test case migration, TEMdroid's F1 score is 89%, also 7% improvement compared to the baseline approach.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2110752255",
                    "name": "Hao Yu"
                },
                {
                    "authorId": "2089966950",
                    "name": "Bo Shen"
                },
                {
                    "authorId": "2038503437",
                    "name": "Dezhi Ran"
                },
                {
                    "authorId": null,
                    "name": "Jiaxin Zhang"
                },
                {
                    "authorId": "2145906426",
                    "name": "Qi Zhang"
                },
                {
                    "authorId": "2304523047",
                    "name": "Yuchi Ma"
                },
                {
                    "authorId": "2084524",
                    "name": "Guangtai Liang"
                },
                {
                    "authorId": "2172444921",
                    "name": "Ying Li"
                },
                {
                    "authorId": "2057038049",
                    "name": "Tao Xie"
                },
                {
                    "authorId": "7417844",
                    "name": "Qianxiang Wang"
                }
            ]
        },
        {
            "paperId": "a83b1c85bca84782a09fd1cbd57a2c1004c60635",
            "title": "Badge: Prioritizing UI Events with Hierarchical Multi-Armed Bandits for Automated UI Testing",
            "abstract": "To assure high quality of mobile applications (apps for short), automated UI testing triggers events (associated with UI elements on app UIs) without human intervention, aiming to maximize code coverage and find unique crashes. To achieve high test effectiveness, automated UI testing prioritizes a UI event based on its exploration value (e.g., the increased code coverage of future exploration rooted from the UI event). Various strategies have been proposed to estimate the exploration value of a UI event without considering its exploration diversity (reflecting the variance of covered code entities achieved by explorations rooted from this UI event across its different triggerings), resulting in low test effectiveness, especially on complex mobile apps. To address the preceding problem, in this paper, we propose a new approach named Badge to prioritize UI events considering both their exploration values and exploration diversity for effective automated UI testing. In particular, we design a hierarchical multi-armed bandit model to effectively estimate the exploration value and exploration diversity of a UI event based on its historical explorations along with historical explorations rooted from UI events in the same UI group. We evaluate Badge on 21 highly popular industrial apps widely used by previous related work. Experimental results show that Badge outperforms state-of-the-art/practice tools with 18%-146% relative code coverage improvement and finding 1.19-5.20 \u00d7 unique crashes, demonstrating the effectiveness of Badge. Further experimental studies confirm the benefits brought by Badge's individual algorithms.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2038503437",
                    "name": "Dezhi Ran"
                },
                {
                    "authorId": "48016595",
                    "name": "Hao Wang"
                },
                {
                    "authorId": "49337054",
                    "name": "Wenyu Wang"
                },
                {
                    "authorId": "2057038192",
                    "name": "Tao Xie"
                }
            ]
        },
        {
            "paperId": "851fade4aa63676d3123d2cb9d298290f9a6ca9f",
            "title": "Automated Visual Testing for Mobile Apps in an Industrial Setting",
            "abstract": "User Interface (UI) testing has become a common practice for quality assurance of industrial mobile applications (in short as apps). While many automated tools have been developed, they often do not satisfy two major industrial requirements that make a tool desirable in industrial settings: high applicability across platforms (e.g., Android, iOS, AliOS, and Harmony OS) and high capability to handle apps with non-standard UI elements (whose internal structures cannot be acquired using platform APIs). Toward addressing these industrial requirements, automated visual testing emerges to take only device screenshots as input in order to support automated test generation. In this paper, we report our experiences of developing and deploying VTest, our industrial visual testing framework to assure high quality of Taobao, a highly popular industrial app with about one billion monthly active users. VTest includes carefully designed techniques and infrastructure support, outperforming Monkey (which has been popularly deployed in industry and shown to perform superiorly or similarly compared to state-of-the-art tools) with 87.6% more activity coverage. VTEST has been deployed both internally in Alibaba and externally in the Software Green Alliance to provide testing services for top smart-phone vendors and app vendors in China. We summarize five major lessons learned from developing and deploying VTEST.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2038503437",
                    "name": "Dezhi Ran"
                },
                {
                    "authorId": "2118207557",
                    "name": "Zongyang Li"
                },
                {
                    "authorId": "2308913803",
                    "name": "Chenxu Liu"
                },
                {
                    "authorId": "49337054",
                    "name": "Wenyu Wang"
                },
                {
                    "authorId": "7619525",
                    "name": "W. Meng"
                },
                {
                    "authorId": "83426335",
                    "name": "Xionglin Wu"
                },
                {
                    "authorId": "2170878992",
                    "name": "Hui Jin"
                },
                {
                    "authorId": "2170979562",
                    "name": "Jing Cui"
                },
                {
                    "authorId": "2109889035",
                    "name": "Xing Tang"
                },
                {
                    "authorId": "2057038192",
                    "name": "Tao Xie"
                }
            ]
        },
        {
            "paperId": "69adfecf73961de15cc774796f1a1a91ae291cce",
            "title": "SSR: Joint Optimization of Recommendation and Adaptive Bitrate Streaming for Short-form Video Feed",
            "abstract": "Short-form video feed has become one of the most popular ways for billions of users to interact with content, where users watch short-form videos of a few seconds one-by-one in a session. The common solution to improve the quality of experience (QoE) for short-form video feed is to treat it as a common sequential item recommendation problem and maximize its click-through rate prediction. However, the QoE of short-form video streaming under dynamic network conditions is jointly determined by both recommendation accuracy and streaming efficiency, and thus merely considering recommendation will lead to the degradation of the QoE of the streaming system for the audience. In this paper, we propose SSR, namely the short-form video streaming and recommendation system, which consists of a Transformer-based recommendation module and a reinforcement learning (RL) based bitrate adaptation streaming module. Specifically, we use Transformer to encode the session into a representation vector and recommend proper short-form videos based on the user\u2019s recent interest and the timeliness characteristics of short-form video contents. Then, the RL module combines the representation of session and other observations within the playback, and yields the appropriate bitrate allocation for the next short-form video to optimize a given QoE objective. Trace-driven emulations verify the efficiency of SSR compared to several state-of-the-art recommender systems and streaming strategies with at least 10%-15% QoE improvement under various QoE objectives.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2038503437",
                    "name": "Dezhi Ran"
                },
                {
                    "authorId": "1845531686",
                    "name": "Yuanxing Zhang"
                },
                {
                    "authorId": "49039276",
                    "name": "Wenhan Zhang"
                },
                {
                    "authorId": "145987447",
                    "name": "Kaigui Bian"
                }
            ]
        },
        {
            "paperId": "79dfe6afbaa7aee5dfc8a967c18196a4b8386a8a",
            "title": "CFP: A Cross-layer Recommender System with Fine-grained Preloading for Short Video Streaming at Network Edge",
            "abstract": "Nowadays, short video feed has attracted billions of mobile users all around the world to interact with content effortlessly, yielding an explosive growth of short video commerce. Typically, users watch full-screen short videos of a few seconds one-by-one in a watch-list generated by recommender systems, skipping those they are not interested in. However, the recommender system at the cloud makes a user-interest-specific decision mostly based on the users' behavior data collected within the application itself (e.g., users' view history), without examining the lower-layer network and communication statistics. When the playback choked due to the limited network bandwidth, the user will probably skip the video, leading to a waste of bandwidth and degradation of the user's quality of experience (QoE). Meanwhile, the excessive number of user requests to video contents raises a heavy computational load and communication cost for the recommender system at the cloud to determine which videos to be recommended and delivered to each user in a real-time manner. The advance of edge computing provides a promising avenue of deploying edge nodes with caches (e.g., household devices) beyond cloud and edge servers, such that the recommender system in the cloud can place popular video contents closer to client users, and meanwhile the contents are delivered to client users with good network condition. In this paper, we propose CFP, a cross-layer recommender system for short video streaming with fine-grained preloading technique at the network edge. CFP jointly optimizes the recommendation effect of the video application and the content preloading efficiency under various network conditions at the network edge. CFP takes a two-stage approach: the cloud server first seeks to perform edge-wise instead of user-interest-specific recommendation with neural collaborative filtering recommender, preloading a list of candidate videos to edge nodes, and each edge node, deploying the GRU with attention, then delivers the proper video contents to the client user device according to the user's preference. Trace-driven emulations demonstrate the efficiency of the proposed CFP scheme.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2038503437",
                    "name": "Dezhi Ran"
                },
                {
                    "authorId": "1845531686",
                    "name": "Yuanxing Zhang"
                },
                {
                    "authorId": "2163739631",
                    "name": "Ye Yuan"
                },
                {
                    "authorId": "145987447",
                    "name": "Kaigui Bian"
                }
            ]
        },
        {
            "paperId": "e65f11c355f3715213891ffd0b1740f7d19a86d1",
            "title": "Preference-Aware Dynamic Bitrate Adaptation for Mobile Short-Form Video Feed Streaming",
            "abstract": "Short-form video feed becomes increasingly popular among younger generations, where mobile users watch videos of a few seconds one-by-one in a session or a pre-defined list. The common solution to improve the quality of experience (QoE) for short-video feed is to implement dynamic adaptive streaming strategies to decide bitrate for each video. However, legacy bitrate adaptation strategies fail to differentiate the weights of videos in the list according to the user preferences, leading to the bandwidth waste on downloading those video content skipped immediately by the users without being displayed. In this paper, we propose RecDASH, which consists of an attention-based user modeling module leveraging advanced recommendation algorithms and a reinforcement learning (RL) based bitrate adaptation module. Specifically, we use gated recurrent unit (GRU) network with attention mechanism to encode the session into a representation vector. Then, RL module combines the representation of session and other observations within playback, and yields the appropriate bitrate for the next short-form video for optimizing a given QoE objective. The low space and time complexity of the model enables it to be easily deployed on mobile devices. Trace-driven emulations verify the efficiency of RecDASH compared to several state-of-the-art streaming strategies with at least 5%-15% improvement on the video quality under various QoE objectives.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2038503437",
                    "name": "Dezhi Ran"
                },
                {
                    "authorId": "2038464293",
                    "name": "Huadun Hong"
                },
                {
                    "authorId": "2144355898",
                    "name": "Yang Chen"
                },
                {
                    "authorId": "2038506998",
                    "name": "Bonan Ma"
                },
                {
                    "authorId": "1845531686",
                    "name": "Yuanxing Zhang"
                },
                {
                    "authorId": "49759667",
                    "name": "Pengyu Zhao"
                },
                {
                    "authorId": "145987447",
                    "name": "Kaigui Bian"
                }
            ]
        }
    ]
}