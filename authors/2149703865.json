{
    "authorId": "2149703865",
    "papers": [
        {
            "paperId": "4b1e9812c71c4a243e84cf99aef8f4a2fc9ccd60",
            "title": "AdvSQLi: Generating Adversarial SQL Injections Against Real-World WAF-as-a-Service",
            "abstract": "As the first defensive layer that attacks would hit, the web application firewall (WAF) plays an indispensable role in defending against malicious web attacks like SQL injection (SQLi). With the development of cloud computing, WAF-as-a-service, as one kind of Security-as-a-service, has been proposed to facilitate the deployment, configuration, and update of WAFs in the cloud. Despite its tremendous popularity, the security vulnerabilities of WAF-as-a-service are still largely unknown, which is highly concerning given its massive usage. In this paper, we propose a general and extendable attack framework, namely AdvSQLi, in which a minimal series of transformations are performed on the hierarchical tree representation of the original SQLi payload, such that the generated SQLi payloads can not only bypass WAF-as-a-service under black-box settings but also keep the same functionality and maliciousness as the original payload. With AdvSQLi, we make it feasible to inspect and understand the security vulnerabilities of WAFs automatically, helping vendors make products more secure. To evaluate the attack effectiveness and efficiency of AdvSQLi, we first employ two public datasets to generate adversarial SQLi payloads, leading to a maximum attack success rate of 100% against state-of-the-art ML-based SQLi detectors. Furthermore, to demonstrate the immediate security threats caused by AdvSQLi, we evaluate the attack effectiveness against 7 WAF-as-a-service solutions from mainstream vendors and find all of them are vulnerable to AdvSQLi. For instance, AdvSQLi achieves an attack success rate of over 79% against the F5 WAF. Through in-depth analysis of the evaluation results, we further condense out several general yet severe flaws of these vendors that cannot be easily patched.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2149703865",
                    "name": "Zhenqing Qu"
                },
                {
                    "authorId": "1701151",
                    "name": "Xiang Ling"
                },
                {
                    "authorId": "2278623383",
                    "name": "Ting Wang"
                },
                {
                    "authorId": "2143735590",
                    "name": "Xiang Chen"
                },
                {
                    "authorId": "2248114065",
                    "name": "Shouling Ji"
                },
                {
                    "authorId": "2118839825",
                    "name": "Chunming Wu"
                }
            ]
        },
        {
            "paperId": "8e6d1470e8d52b46b07db84bcdc727963b6bf7dd",
            "title": "MalGraph: Hierarchical Graph Neural Networks for Robust Windows Malware Detection",
            "abstract": "With the ever-increasing malware threats, malware detection plays an indispensable role in protecting information systems. Although tremendous research efforts have been made, there are still two key challenges hindering them from being applied to accurately and robustly detect malwares. Firstly, most of them represent executables with shallow features, but ignore their semantic and structural information. Secondly, they are primarily based on representations that can be easily modified by attackers and thus cannot provide robustness against adversarial attacks. To tackle the challenges, we present MalGraph, which first represents executables with hierarchical graphs and then uses an end-to-end learning framework based on graph neural networks for malware detection. In particular, a hierarchical graph consists of a function call graph that captures the interaction semantics among different functions at the inter-function level and corresponding control-flow graphs for learning the structural semantics of each function at the intra-function level. We argue the abstraction and hierarchy nature of hierarchical graphs makes them not only easy to capture rich structural information of executables, but also be immune to adversarial attacks. Evaluations show that MalGraph not only outperforms state-of-the-art malware detection, but also exhibits stronger robustness against adversarial attacks by a large margin.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "1701151",
                    "name": "Xiang Ling"
                },
                {
                    "authorId": "2116666963",
                    "name": "Lingfei Wu"
                },
                {
                    "authorId": "2066621473",
                    "name": "Wei Deng"
                },
                {
                    "authorId": "2149703865",
                    "name": "Zhenqing Qu"
                },
                {
                    "authorId": "2155241302",
                    "name": "Jiangyu Zhang"
                },
                {
                    "authorId": "38654394",
                    "name": "Shenmin Zhang"
                },
                {
                    "authorId": "1901958",
                    "name": "Tengyu Ma"
                },
                {
                    "authorId": "2152594370",
                    "name": "Bin Wang"
                },
                {
                    "authorId": "2118839825",
                    "name": "Chunming Wu"
                },
                {
                    "authorId": "2081160",
                    "name": "S. Ji"
                }
            ]
        }
    ]
}