{
    "authorId": "2066621473",
    "papers": [
        {
            "paperId": "fd2561d18dbaa3b93f83a89b8f0081f2d209380e",
            "title": "A Wolf in Sheep's Clothing: Practical Black-box Adversarial Attacks for Evading Learning-based Windows Malware Detection in the Wild",
            "abstract": "Given the remarkable achievements of existing learning-based malware detection in both academia and industry, this paper presents MalGuise, a practical black-box adversarial attack framework that evaluates the security risks of existing learning-based Windows malware detection systems under the black-box setting. MalGuise first employs a novel semantics-preserving transformation of call-based redividing to concurrently manipulate both nodes and edges of malware's control-flow graph, making it less noticeable. By employing a Monte-Carlo-tree-search-based optimization, MalGuise then searches for an optimized sequence of call-based redividing transformations to apply to the input Windows malware for evasions. Finally, it reconstructs the adversarial malware file based on the optimized transformation sequence while adhering to Windows executable format constraints, thereby maintaining the same semantics as the original. MalGuise is systematically evaluated against three state-of-the-art learning-based Windows malware detection systems under the black-box setting. Evaluation results demonstrate that MalGuise achieves a remarkably high attack success rate, mostly exceeding 95%, with over 91% of the generated adversarial malware files maintaining the same semantics. Furthermore, MalGuise achieves up to a 74.97% attack success rate against five anti-virus products, highlighting potential tangible security concerns to real-world users.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2212417572",
                    "name": "Xiang Ling"
                },
                {
                    "authorId": "2309847155",
                    "name": "Zhiyu Wu"
                },
                {
                    "authorId": "2309757501",
                    "name": "Bin Wang"
                },
                {
                    "authorId": "2066621473",
                    "name": "Wei Deng"
                },
                {
                    "authorId": "1782489",
                    "name": "Jingzheng Wu"
                },
                {
                    "authorId": "2261280308",
                    "name": "Shouling Ji"
                },
                {
                    "authorId": "2766889",
                    "name": "Tianyue Luo"
                },
                {
                    "authorId": "2134080131",
                    "name": "Yanjun Wu"
                }
            ]
        },
        {
            "paperId": "8e6d1470e8d52b46b07db84bcdc727963b6bf7dd",
            "title": "MalGraph: Hierarchical Graph Neural Networks for Robust Windows Malware Detection",
            "abstract": "With the ever-increasing malware threats, malware detection plays an indispensable role in protecting information systems. Although tremendous research efforts have been made, there are still two key challenges hindering them from being applied to accurately and robustly detect malwares. Firstly, most of them represent executables with shallow features, but ignore their semantic and structural information. Secondly, they are primarily based on representations that can be easily modified by attackers and thus cannot provide robustness against adversarial attacks. To tackle the challenges, we present MalGraph, which first represents executables with hierarchical graphs and then uses an end-to-end learning framework based on graph neural networks for malware detection. In particular, a hierarchical graph consists of a function call graph that captures the interaction semantics among different functions at the inter-function level and corresponding control-flow graphs for learning the structural semantics of each function at the intra-function level. We argue the abstraction and hierarchy nature of hierarchical graphs makes them not only easy to capture rich structural information of executables, but also be immune to adversarial attacks. Evaluations show that MalGraph not only outperforms state-of-the-art malware detection, but also exhibits stronger robustness against adversarial attacks by a large margin.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "1701151",
                    "name": "Xiang Ling"
                },
                {
                    "authorId": "2116666963",
                    "name": "Lingfei Wu"
                },
                {
                    "authorId": "2066621473",
                    "name": "Wei Deng"
                },
                {
                    "authorId": "2149703865",
                    "name": "Zhenqing Qu"
                },
                {
                    "authorId": "2155241302",
                    "name": "Jiangyu Zhang"
                },
                {
                    "authorId": "38654394",
                    "name": "Shenmin Zhang"
                },
                {
                    "authorId": "1901958",
                    "name": "Tengyu Ma"
                },
                {
                    "authorId": "2152594370",
                    "name": "Bin Wang"
                },
                {
                    "authorId": "2118839825",
                    "name": "Chunming Wu"
                },
                {
                    "authorId": "2081160",
                    "name": "S. Ji"
                }
            ]
        },
        {
            "paperId": "d13ccd2261419008cd34c7c0911c007f37ca1313",
            "title": "Integrating Traffics with Network Device Logs for Anomaly Detection",
            "abstract": "Advanced cyberattacks are often featured by multiple types, layers, and stages, with the goal of cheating the monitors. Existing anomaly detection systems usually search logs or traffics alone for evidence of attacks but ignore further analysis about attack processes. For instance, the traffic detection methods can only detect the attack flows roughly but fail to reconstruct the attack event process and reveal the current network node status. As a result, they cannot fully model the complex multistage attack. To address these problems, we present Traffic-Log Combined Detection (TLCD), which is a multistage intrusion analysis system. Inspired by multiplatform intrusion detection techniques, we integrate traffics with network device logs through association rules. TLCD correlates log data with traffic characteristics to reflect the attack process and construct a federated detection platform. Specifically, TLCD can discover the process steps of a cyberattack attack, reflect the current network status, and reveal the behaviors of normal users. Our experimental results over different cyberattacks demonstrate that TLCD works well with high accuracy and low false positive rate.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "10709998",
                    "name": "Jiazhong Lu"
                },
                {
                    "authorId": "2753987",
                    "name": "Fengmao Lv"
                },
                {
                    "authorId": "145633928",
                    "name": "Zhongliu Zhuo"
                },
                {
                    "authorId": "9117563",
                    "name": "Xiaosong Zhang"
                },
                {
                    "authorId": "48032975",
                    "name": "Xiaolei Liu"
                },
                {
                    "authorId": "1387913799",
                    "name": "Teng Hu"
                },
                {
                    "authorId": "2066621473",
                    "name": "Wei Deng"
                }
            ]
        }
    ]
}