{
    "authorId": "2128077726",
    "papers": [
        {
            "paperId": "26fe0d9b4afaedc7be92bc3fbd4b1ce929326fad",
            "title": "Counterfactually Evaluating Explanations in Recommender Systems",
            "abstract": "Modern recommender systems face an increasing need to explain their recommendations. Despite considerable progress in this area, evaluating the quality of explanations remains a significant challenge for researchers and practitioners. Prior work mainly conducts human study to evaluate explanation quality, which is usually expensive, time-consuming, and prone to human bias. In this paper, we propose an offline evaluation method that can be computed without human involvement. To evaluate an explanation, our method quantifies its counterfactual impact on the recommendation. To validate the effectiveness of our method, we carry out an online user study. We show that, compared to conventional methods, our method can produce evaluation scores more correlated with the real human judgments, and therefore can serve as a better proxy for human evaluation. In addition, we show that explanations with high evaluation scores are considered better by humans. Our findings highlight the promising direction of using the counterfactual approach as one possible way to evaluate recommendation explanations.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "3460027",
                    "name": "Yuanshun Yao"
                },
                {
                    "authorId": "2128077726",
                    "name": "Chong Wang"
                },
                {
                    "authorId": "2145572890",
                    "name": "Hang Li"
                }
            ]
        },
        {
            "paperId": "e88e475516b53b7bb573d66673015715da87f50b",
            "title": "Learning to Counterfactually Explain Recommendations",
            "abstract": "Recommender system practitioners are facing increasing pressure to explain recommendations. We explore how to explain recommendations using counterfactual logic, i.e.\"Had you not interacted with the following items, we would not recommend it.\"Compared to the traditional explanation logic, counterfactual explanations are easier to understand, more technically verifiable, and more informative in terms of giving users control over recommendations. The major challenge of generating such explanations is the computational cost because it requires repeatedly retraining the models to obtain the effect on a recommendation caused by the absence of user history. We propose a learning-based framework to generate counterfactual explanations. The key idea is to train a surrogate model to learn the effect of removing a subset of user history on the recommendation. To this end, we first artificially simulate the counterfactual outcomes on the recommendation after deleting subsets of history. Then we train a surrogate model to learn the mapping between a history deletion and the corresponding change of the recommendation caused by the deletion. Finally, to generate an explanation, we find the history subset predicted by the surrogate model that is most likely to remove the recommendation. Through offline experiments and online user studies, we show our method, compared to baselines, can generate explanations that are more counterfactually valid and more satisfactory considered by users.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "3460027",
                    "name": "Yuanshun Yao"
                },
                {
                    "authorId": "2128077726",
                    "name": "Chong Wang"
                },
                {
                    "authorId": "2145572890",
                    "name": "Hang Li"
                }
            ]
        },
        {
            "paperId": "455e11bde14967fc76d87d4649d821d2f27c3055",
            "title": "Category-aware Collaborative Sequential Recommendation",
            "abstract": "Sequential recommendation is the task of predicting the next items for users based on their interaction history. Modeling the dependence of the next action on the past actions accurately is crucial to this problem. Moreover, sequential recommendation often faces serious sparsity of item-to-item transitions in a user's action sequence, which limits the practical utility of such solutions. To tackle these challenges, we propose a Category-aware Collaborative Sequential Recommender. Our preliminary statistical tests demonstrate that the in-category item-to-item transitions are often much stronger indicators of the next items than the general item-to-item transitions observed in the original sequence. Our method makes use of item category in two ways. First, the recommender utilizes item category to organize a user's own actions to enhance dependency modeling based on her own past actions. It utilizes self-attention to capture in-category transition patterns, and determines which of the in-category transition patterns to consider based on the categories of recent actions. Second, the recommender utilizes the item category to retrieve users with similar in-category preferences to enhance collaborative learning across users, and thus conquer sparsity. It utilizes attention to incorporate in-category transition patterns from the retrieved users for the target user. Extensive experiments on two large datasets prove the effectiveness of our solution against an extensive list of state-of-the-art sequential recommendation models.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "39483735",
                    "name": "Renqin Cai"
                },
                {
                    "authorId": "1491324165",
                    "name": "Jibang Wu"
                },
                {
                    "authorId": "46179085",
                    "name": "Aidan San"
                },
                {
                    "authorId": "2128077726",
                    "name": "Chong Wang"
                },
                {
                    "authorId": "2108883660",
                    "name": "Hongning Wang"
                }
            ]
        },
        {
            "paperId": "d166e32057d38ccddf6e35062ceaa42cd5dd30f6",
            "title": "AutoLoss: Automated Loss Function Search in Recommendations",
            "abstract": "Designing an effective loss function plays a crucial role in training deep recommender systems. Most existing works often leverage a predefined and fixed loss function that could lead to suboptimal recommendation quality and training efficiency. Some recent efforts rely on exhaustively or manually searched weights to fuse a group of candidate loss functions, which is exceptionally costly in computation and time. They also neglect the various convergence behaviors of different data examples. In this work, we propose an AutoLoss framework that can automatically and adaptively search for the appropriate loss function from a set of candidates. To be specific, we develop a novel controller network, which can dynamically adjust the loss probabilities in a differentiable manner. Unlike existing algorithms, the proposed controller can adaptively generate the loss probabilities for different data examples according to their varied convergence behaviors. Such design improves the model's generalizability and transferability between deep recommender systems and datasets. We evaluate the proposed framework on two benchmark datasets. The results show that AutoLoss outperforms representative baselines. Further experiments have been conducted to deepen our understandings of AutoLoss, including its transferability, components and training efficiency.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2733057",
                    "name": "Xiangyu Zhao"
                },
                {
                    "authorId": "2143856455",
                    "name": "Haochen Liu"
                },
                {
                    "authorId": "41031455",
                    "name": "Wenqi Fan"
                },
                {
                    "authorId": "2146672392",
                    "name": "Hui Liu"
                },
                {
                    "authorId": "1736632",
                    "name": "Jiliang Tang"
                },
                {
                    "authorId": "2128077726",
                    "name": "Chong Wang"
                }
            ]
        },
        {
            "paperId": "ede2eb7697b5e0a41c4f832813b365eb10d0ad9b",
            "title": "AutoEmb: Automated Embedding Dimensionality Search in Streaming Recommendations",
            "abstract": "Deep learning-based recommender systems (DLRSs) often have embedding layers, which are utilized to lessen the dimension of categorical variables (e.g., user/item identifiers) and meaningfully transform them in the low-dimensional space. The majority of existing DLRSs empirically pre-define a fixed and unified dimension for all user/item embeddings. It is evident from recent researches that different embedding sizes are highly desired for different users/items according to their frequency. However, manually selecting embedding sizes in recommender systems can be very challenging due to a large number of users/items and the dynamic nature of their frequency. Thus, in this paper, we propose an AutoML based end-to-end framework (AutoEmb), enabling various embedding dimensions according to the frequency in an automated and dynamic manner. To be specific, we first enhance a typical DLRS to allow various embedding dimensions; then, we propose an end-to-end differentiable framework that can automatically select different embedding dimensions according to user/item frequency; finally, we propose an AutoML based optimization algorithm in a streaming recommendation setting. The experimental results based on widely used benchmark datasets demonstrate the effectiveness of the AutoEmb framework.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2116710405",
                    "name": "Xiangyu Zhao"
                },
                {
                    "authorId": "66442354",
                    "name": "Haochen Liu"
                },
                {
                    "authorId": "2255025428",
                    "name": "Wenqi Fan"
                },
                {
                    "authorId": "2146672392",
                    "name": "Hui Liu"
                },
                {
                    "authorId": "2240599706",
                    "name": "Jiliang Tang"
                },
                {
                    "authorId": "2128077726",
                    "name": "Chong Wang"
                },
                {
                    "authorId": "2265558277",
                    "name": "Ming Chen"
                },
                {
                    "authorId": "2265622616",
                    "name": "Xudong Zheng"
                },
                {
                    "authorId": "2265595188",
                    "name": "Xiaobing Liu"
                },
                {
                    "authorId": "2265577657",
                    "name": "Xiwang Yang"
                }
            ]
        },
        {
            "paperId": "5b282d0313b33dea3b7544e97b53a772ca165c90",
            "title": "Automated Embedding Size Search in Deep Recommender Systems",
            "abstract": "Deep recommender systems have achieved promising performance on real-world recommendation tasks. They typically represent users and items in a low-dimensional embedding space and then feed the embeddings into the following deep network structures for prediction. Traditional deep recommender models often adopt uniform and fixed embedding sizes for all the users and items. However, such design is not optimal in terms of not only the recommendation performance and but also the space complexity. In this paper, we propose to dynamically search the embedding sizes for different users and items and introduce a novel embedding size adjustment policy network (ESAPN). ESAPN serves as an automated reinforcement learning agent to adaptively search appropriate embedding sizes for users and items. Different from existing works, our model performs hard selection on different embedding sizes, which leads to a more accurate selection and decreases the storage space. We evaluate our model under the streaming setting on two real-world benchmark datasets. The results show that our proposed framework outperforms representative baselines. Moreover, our framework is demonstrated to be robust to the cold-start problem and reduce memory consumption by around 40%-90%. The implementation of the model is released.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "66442354",
                    "name": "Haochen Liu"
                },
                {
                    "authorId": "2733057",
                    "name": "Xiangyu Zhao"
                },
                {
                    "authorId": "2128077726",
                    "name": "Chong Wang"
                },
                {
                    "authorId": "2109059862",
                    "name": "Xiaobing Liu"
                },
                {
                    "authorId": "1736632",
                    "name": "Jiliang Tang"
                }
            ]
        },
        {
            "paperId": "6fa7c419c02da91fb9766db9eb39721bbf24e55d",
            "title": "AutoEmb: Automated Embedding Dimensionality Search in Streaming Recommendations",
            "abstract": "Deep learning based recommender systems (DLRSs) often have embedding layers, which are utilized to lessen the dimensionality of categorical variables (e.g. user/item identifiers) and meaningfully transform them in the low-dimensional space. The majority of existing DLRSs empirically pre-define a fixed and unified dimension for all user/item embeddings. It is evident from recent researches that different embedding sizes are highly desired for different users/items according to their popularity. However, manually selecting embedding sizes in recommender systems can be very challenging due to the large number of users/items and the dynamic nature of their popularity. Thus, in this paper, we propose an AutoML based end-to-end framework (AutoEmb), which can enable various embedding dimensions according to the popularity in an automated and dynamic manner. To be specific, we first enhance a typical DLRS to allow various embedding dimensions; then we propose an end-to-end differentiable framework that can automatically select different embedding dimensions according to user/item popularity; finally we propose an AutoML based optimization algorithm in a streaming recommendation setting. The experimental results based on widely used benchmark datasets demonstrate the effectiveness of the AutoEmb framework.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2733057",
                    "name": "Xiangyu Zhao"
                },
                {
                    "authorId": "2128077726",
                    "name": "Chong Wang"
                },
                {
                    "authorId": "2108633043",
                    "name": "Ming Chen"
                },
                {
                    "authorId": "2110301314",
                    "name": "Xudong Zheng"
                },
                {
                    "authorId": "2109059862",
                    "name": "Xiaobing Liu"
                },
                {
                    "authorId": "1736632",
                    "name": "Jiliang Tang"
                }
            ]
        }
    ]
}