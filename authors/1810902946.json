{
    "authorId": "1810902946",
    "papers": [
        {
            "paperId": "01bea19122e657d9043509902ba68d785fba7c7f",
            "title": "ContractTinker: LLM-Empowered Vulnerability Repair for Real-World Smart Contracts",
            "abstract": "Smart contracts are susceptible to being exploited by attackers, especially when facing real-world vulnerabilities. To mitigate this risk, developers often rely on third-party audit services to identify potential vulnerabilities before project deployment. Nevertheless, repairing the identified vulnerabilities is still complex and labor-intensive, particularly for developers lacking security expertise. Moreover, existing pattern-based repair tools mostly fail to address real-world vulnerabilities due to their lack of high-level semantic understanding. To fill this gap, we propose ContractTinker, a Large Language Models (LLMs)-empowered tool for real-world vulnerability repair. The key insight is our adoption of the Chain-of-Thought approach to break down the entire generation task into sub-tasks. Additionally, to reduce hallucination, we integrate program static analysis to guide the LLM. We evaluate ContractTinker on 48 high-risk vulnerabilities. The experimental results show that among the patches generated by ContractTinker, 23 (48%) are valid patches that fix the vulnerabilities, while 10 (21%) require only minor modifications. A video of ContractTinker is available at https://youtu.be/HWFVi-YHcPE.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2306398111",
                    "name": "Che Wang"
                },
                {
                    "authorId": "2107997713",
                    "name": "Jiashuo Zhang"
                },
                {
                    "authorId": "1810902946",
                    "name": "Jianbo Gao"
                },
                {
                    "authorId": "2238053306",
                    "name": "Libin Xia"
                },
                {
                    "authorId": "143963193",
                    "name": "Zhi Guan"
                },
                {
                    "authorId": "2275028007",
                    "name": "Zhong Chen"
                }
            ]
        },
        {
            "paperId": "8c507cc9bee90a56deb9aec1514377a48dac8a7d",
            "title": "Cryptcoder: An Automatic Code Generator for Cryptographic Tasks in Ethereum Smart Contracts",
            "abstract": "Cryptographic APIs provided by Ethereum are widely adopted in decentralized applications (DApps) for cryptographic operations. However, developers who lack expertise in cryptography frequently encounter difficulties when working with low-level cryptographic APIs, thereby producing insecure code. To address this issue, we introduce Cryptcoder, an automatic code generator designed to bridge the gap between low-level cryptographic APIs and high-level cryptographic tasks in Ethereum. The fundamental component of Cryptcoder is Cryptlang, a Solidity-compatible domain-specific language (DSL) designed for cryptographic tasks. Developers can utilize Cryptlang for the straightforward and secure implementation of cryptographic tasks, such as signatures and commitments, and employ Cryptcoder for the automatic conversion into Solidity code. The evaluation of Cryptcoder demonstrates both its functionality in generating Solidity code and an acceptable overhead, evidenced by a mere 4% average increase in gas costs compared to the reference code. A demonstration video of Cryptcoder is available at https://youtu.be/AxhCdGiu7dw.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2238053306",
                    "name": "Libin Xia"
                },
                {
                    "authorId": "2107997713",
                    "name": "Jiashuo Zhang"
                },
                {
                    "authorId": "2306398111",
                    "name": "Che Wang"
                },
                {
                    "authorId": "2312188348",
                    "name": "Zezhong Tan"
                },
                {
                    "authorId": "1810902946",
                    "name": "Jianbo Gao"
                },
                {
                    "authorId": "143963193",
                    "name": "Zhi Guan"
                },
                {
                    "authorId": "2275028007",
                    "name": "Zhong Chen"
                }
            ]
        },
        {
            "paperId": "ad90511586a8cc955bb7b4d5b19fbde0a25757c6",
            "title": "SolaSim: Clone Detection for Solana Smart Contracts via Program Representation",
            "abstract": "The open-source nature of smart contracts provides the facility for developers to clone contracts and introduces the risk of vulnerability proliferation as well. Despite intensive research on smart contract clone detection in recent years, existing techniques are still unsatisfactory in detecting Solana smart contracts. To fill this gap, in this paper, we designed a clone detection tool SolaSim for Solana smart contracts and conducted an empirical study to understand the code reuse in the Solana ecosystem. Specifically, SolaSim is based on the semantic metadata extractor and the similarity checker. For each contract, the semantic metadata extractor generates an instruction-level weighted Attributed Control Flow Graph (ACFG) and its semantic metadata (i.e., a combination of high-level semantic and structure information) based on Rust Mid-level Intermediate Representation. The similarity checker adopts a combinatorial optimization algorithm to compute the statistical similarity of a pair of contracts. The evaluation results demonstrated the effectiveness of SolaSim in identifying clones with 94.3% accuracy and it can identify up to Type-3 clone level. Notably, we found there are over 50% clone ratios in the Solana smart contracts ecosystem, in which most of them are cloned from famous open-sourced projects.CCS CONCEPTS\u2022 Software and its engineering $\\rightarrow$ Software maintenance tools; \u2022 Security and privacy $\\rightarrow$ Software security engineering.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2306398111",
                    "name": "Che Wang"
                },
                {
                    "authorId": "2144462174",
                    "name": "Yue Li"
                },
                {
                    "authorId": "1810902946",
                    "name": "Jianbo Gao"
                },
                {
                    "authorId": "150179779",
                    "name": "Kesen Wang"
                },
                {
                    "authorId": "2107997713",
                    "name": "Jiashuo Zhang"
                },
                {
                    "authorId": "143963193",
                    "name": "Zhi Guan"
                },
                {
                    "authorId": "2275028007",
                    "name": "Zhong Chen"
                }
            ]
        },
        {
            "paperId": "b6e0ec9888a142153f1939fae6955e6ee6fa0710",
            "title": "RollupNet: Trustless State Channels for Real-Time Cross Rollup Contract Execution",
            "abstract": "As a leading approach to improving the scalability of Ethereum, Rollup projects (e.g., Arbitrum) have proliferated in recent years, leading to an increased demand for cross-Rollup solutions. Unfortunately, existing cross-Rollup solutions are either slow and expensive or unsuitable for complex cross-Rollup interaction. We present ROLLUPNET, the first state channel that synchronously executes cross-Rollup contracts to support complex cross-Rollup applications while providing both security and efficiency guarantees. To prevent parties from misbehaving, we design an Ethereum-based dispute resolution to ensure the consistency of state between different Rollups. The results show that the ROLLUPNET is practical for Ethereum Rollups.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "150179779",
                    "name": "Kesen Wang"
                },
                {
                    "authorId": "2311037972",
                    "name": "Yue Li"
                },
                {
                    "authorId": "1810902946",
                    "name": "Jianbo Gao"
                },
                {
                    "authorId": "2306398111",
                    "name": "Che Wang"
                },
                {
                    "authorId": "143963193",
                    "name": "Zhi Guan"
                },
                {
                    "authorId": "2275028007",
                    "name": "Zhong Chen"
                }
            ]
        },
        {
            "paperId": "f9e12d4076b84c8d5ea2dae7b9abf0eb98f3d0ce",
            "title": "Demystifying and Detecting Cryptographic Defects in Ethereum Smart Contracts",
            "abstract": "Ethereum has officially provided a set of system-level cryptographic APIs to enhance smart contracts with cryptographic capabilities. These APIs have been utilized in over 10% of Ethereum transactions, motivating developers to implement various on-chain cryptographic tasks, such as digital signatures. However, since developers may not always be cryptographic experts, their ad-hoc and potentially defective implementations could compromise the theoretical guarantees of cryptography, leading to real-world security issues. To mitigate this threat, we conducted the first study aimed at demystifying and detecting cryptographic defects in smart contracts. Through the analysis of 2,406 real-world security reports, we defined nine types of cryptographic defects in smart contracts with detailed descriptions and practical detection patterns. Based on this categorization, we proposed CrySol, a fuzzing-based tool to automate the detection of cryptographic defects in smart contracts. It combines transaction replaying and dynamic taint analysis to extract fine-grained crypto-related semantics and employs crypto-specific strategies to guide the test case generation process. Furthermore, we collected a large-scale dataset containing 25,745 real-world crypto-related smart contracts and evaluated CrySol's effectiveness on it. The result demonstrated that CrySol achieves an overall precision of 95.4% and a recall of 91.2%. Notably, CrySol revealed that 5,847 (22.7%) out of 25,745 smart contracts contain at least one cryptographic defect, highlighting the prevalence of these defects.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2107997713",
                    "name": "Jiashuo Zhang"
                },
                {
                    "authorId": "2315950112",
                    "name": "Yiming Shen"
                },
                {
                    "authorId": "2254800142",
                    "name": "Jiachi Chen"
                },
                {
                    "authorId": "2182871981",
                    "name": "J. Su"
                },
                {
                    "authorId": "2239164852",
                    "name": "Yanlin Wang"
                },
                {
                    "authorId": "2239103211",
                    "name": "Ting Chen"
                },
                {
                    "authorId": "1810902946",
                    "name": "Jianbo Gao"
                },
                {
                    "authorId": "2275028007",
                    "name": "Zhong Chen"
                }
            ]
        },
        {
            "paperId": "0360ba931541f06ef8cb7c33e0ed6af1c3076fa9",
            "title": "Hades: Practical Decentralized Identity with Full Accountability and Fine-grained Sybil-resistance",
            "abstract": "Decentralized identity (DID), the idea of giving users complete control over their identity-related data, is being used to solve the privacy tension in the identity management of decentralized applications (Dapps). While existing approaches do an excellent job of solving the privacy tension, they have not adequately addressed the accountability and Sybil-resistance issues. Moreover, these approaches have a considerable gas overhead, making them impractical for Dapps. We presented Hades, a novel practical DID system supporting full accountability and fine-grained Sybil-resistance while providing strong privacy properties. Hades supports three aspects of accountability, i.e., auditability, traceability, and revocation. Hades is the first DID system that supports accountability in all these three aspects. Hades is also the first DID system that supports fine-grained Sybil-resistance, enabling Dapps to customize personalized Sybil resistance strategies based on users\u2019 identity attributes. Hades can run efficiently on the Ethereum Virtual Machine (EVM). We implemented and evaluated Hades. The benchmarks showed that Hades has the lowest gas cost incurred on EVM as far as we know. Also, we presented a case study on attribute-associated fair NFT distribution (\u201cairdrops\u201d) where all previous works failed, whereas we gave a solution leveraging Hades.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "150179779",
                    "name": "Kesen Wang"
                },
                {
                    "authorId": "1810902946",
                    "name": "Jianbo Gao"
                },
                {
                    "authorId": "2269070709",
                    "name": "Qiao Wang"
                },
                {
                    "authorId": "2107997713",
                    "name": "Jiashuo Zhang"
                },
                {
                    "authorId": "2144462174",
                    "name": "Yue Li"
                },
                {
                    "authorId": "143963193",
                    "name": "Zhi Guan"
                },
                {
                    "authorId": "2163668281",
                    "name": "Zhong Chen"
                }
            ]
        },
        {
            "paperId": "16a8bd85535b6a6bc76ae0d5cd258c51e4725d75",
            "title": "When Contracts Meets Crypto: Exploring Developers' Struggles with Ethereum Cryptographic APIs",
            "abstract": "To empower smart contracts with the promising capabilities of cryptography, Ethereum officially introduced a set of cryptographic APIs that facilitate basic cryptographic operations within smart contracts, such as elliptic curve operations. However, since developers are not necessarily cryptography experts, requiring them to directly interact with these basic APIs has caused real-world security issues and potential usability challenges. To guide future research and solutions to these challenges, we conduct the first empirical study on Ethereum cryptographic practices. Through the analysis of 91,484,856 Ethereum transactions, 500 crypto-related contracts, and 483 StackExchange posts, we provide the first in-depth look at cryptographic tasks developers need to accomplish and identify five categories of obstacles they encounter. Furthermore, we conduct an online survey with 78 smart contract practitioners to explore their perspectives on these obstacles and elicit the underlying reasons. We find that more than half of practitioners face more challenges in cryptographic tasks compared to general business logic in smart contracts. Their feedback highlights the gap between low-level cryptographic APIs and high-level tasks they need to accomplish, emphasizing the need for improved cryptographic APIs, task-based templates, and effective assistance tools. Based on these findings, we provide practical implications for further improvements and outline future research directions.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2107997713",
                    "name": "Jiashuo Zhang"
                },
                {
                    "authorId": "2254800142",
                    "name": "Jiachi Chen"
                },
                {
                    "authorId": "3453740",
                    "name": "Zhiyuan Wan"
                },
                {
                    "authorId": "2239103211",
                    "name": "Ting Chen"
                },
                {
                    "authorId": "1810902946",
                    "name": "Jianbo Gao"
                },
                {
                    "authorId": "2275028007",
                    "name": "Zhong Chen"
                }
            ]
        },
        {
            "paperId": "91ec4e89e5caafa349a346696df2568271b994dc",
            "title": "DIDAPPER: A Practical and Auditable On-Chain Identity Service for Decentralized Applications",
            "abstract": "The popularity of decentralized applications brings increasing on-chain audit concerns. Since on-chain accounts do not link to real-world identities, decentralized applications have been wildly used for illegal activities like money laundering. Decentralized identity (DID) is one of the most promising solutions to guarantee on-chain auditability in a privacy-preserving way. However, the existing DID systems suffer from two limitations, making them rarely adopted in on-chain decentralized applications. First, most previous systems only provide partial auditability, meaning that their regulators cannot trace users' real-world identities after users' malicious behaviors occur. Second, current solutions are usually isolated systems, causing a lack of interoperability with on-chain decentralized applications. To address the problems, we propose Didapper, a practical and auditable on-chain identity service with both privacy and auditability for decentralized applications. We introduce group signatures to provide anonymous and traceable credentials for on-chain users and decentralized applications. In order to meet the efficiency and flexibility requirements, we design credential structure and workflow mostly compatible with W3C standards (a DID recommendation that enables verifiable, decentralized digital identity), and realize credential verification service with updatable policies. We implement Didapper and evaluate it on Ethereum, and the results show that the performance of Didapper is acceptable in practice.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2238053306",
                    "name": "Libin Xia"
                },
                {
                    "authorId": "2107997713",
                    "name": "Jiashuo Zhang"
                },
                {
                    "authorId": "2238115451",
                    "name": "Xihan Zhang"
                },
                {
                    "authorId": "2144462174",
                    "name": "Yue Li"
                },
                {
                    "authorId": "1810902946",
                    "name": "Jianbo Gao"
                },
                {
                    "authorId": "143963193",
                    "name": "Zhi Guan"
                },
                {
                    "authorId": "2163668281",
                    "name": "Zhong Chen"
                }
            ]
        },
        {
            "paperId": "c29b56a3a3658c1fa04ec2b8e5d9411c4e1c47bb",
            "title": "Siguard: Detecting Signature-Related Vulnerabilities in Smart Contracts",
            "abstract": "Ethereum smart contract enables developers to en-force access control policies of critical functions using built-in signature verification interfaces, i.e., ecrecover. However, due to the lack of best practices for these interfaces, improper verifications commonly exist in deployed smart contracts, leaving potential unauthorized access and financial losses. Even worse, the attack surface is ignored by both developers and existing smart contract security analyzers. In this paper, we take a close look at signature-related vulnerabilities and de-mystify them with clear classification and characterization. We present Siguard, the first automatic tool to detect these vulnerabilities in real-world smart contracts. Specifically, Siguard explores signature-related paths in the smart contract and extracts data dependencies based on symbolic execution and taint analysis. Then, it conducts vulnerability detection based on a systematic search for violations of standard patterns including EIP-712 and EIP-2621. The preliminary evaluation validated the efficacy of Siguard by reporting previously unknown vulnerabilities in deployed smart contracts on Ethereum. A video of Siguard is available at https://youtu.be/xXAEhqXWOu0",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2107997713",
                    "name": "Jiashuo Zhang"
                },
                {
                    "authorId": "2144462174",
                    "name": "Yue Li"
                },
                {
                    "authorId": "1810902946",
                    "name": "Jianbo Gao"
                },
                {
                    "authorId": "143963193",
                    "name": "Zhi Guan"
                },
                {
                    "authorId": "2163668281",
                    "name": "Zhong Chen"
                }
            ]
        },
        {
            "paperId": "f29303e05d0106c2d06dc5ffd4b8d58f30f12876",
            "title": "TDID: Transparent and Efficient Decentralized Identity Management with Blockchain",
            "abstract": "Decentralized identity (DID) is an identity management framework aiming to return the ownership of an identity to its corresponding user. Recent studies propose to store the identifiers of DID issuers and implement identity management systems based on blockchain. However, existing systems cannot avoid identity tampering and verifiable credential abuse of decentralized identities, which makes the identity management opaque. In this paper, we propose TDID, a Transparent and efficient Decentralized IDentity management system with blockchain. The key insight behind TDID is to manage the registration and authentication of DIDs via smart contracts, and design Structured Merkle Patricia Tree (SMPT) as an underlying data structure to store identity data on blockchain. The smart contract based processes can improve transparency of decentralized identity management, while the SMPT data structure can realize efficient storage of DID data. We implement and evaluate TDID on different identity management operations, and the experimental results show that TDID can achieve about 3.1 times for write operation and 6.3 times for read operation while improving the transparency of DID management.",
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "authors": [
                {
                    "authorId": "2213478101",
                    "name": "Jiakun Hao"
                },
                {
                    "authorId": "1810902946",
                    "name": "Jianbo Gao"
                },
                {
                    "authorId": "2281867895",
                    "name": "Peng Xiang"
                },
                {
                    "authorId": "2107997713",
                    "name": "Jiashuo Zhang"
                },
                {
                    "authorId": "2284035316",
                    "name": "Ziming Chen"
                },
                {
                    "authorId": "2282418769",
                    "name": "Hao Hu"
                },
                {
                    "authorId": "2275028007",
                    "name": "Zhong Chen"
                }
            ]
        }
    ]
}